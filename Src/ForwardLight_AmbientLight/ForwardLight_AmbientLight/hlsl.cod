//
// FX Version: fx_5_0
//
// 7 local buffer(s)
//
cbuffer $Globals
{
    float4  g_outlineColor = { 0.800000012, 0, 0, 1 };// Offset:    0, size:   16
}

cbuffer cbPerFrame : register(b0)
{
    float4x4 gWorld;                    // Offset:    0, size:   64
    float4x4 gView;                     // Offset:   64, size:   64
    float4x4 gProjection;               // Offset:  128, size:   64
    float4x4 gLightView[3];             // Offset:  192, size:  192
    float4x4 gLightProj[3];             // Offset:  384, size:  192
    float4x4 gLightTT;                  // Offset:  576, size:   64
    float3  gEyePosW;                   // Offset:  640, size:   12
}

cbuffer cbLight : register(b1)
{
    float4  gLight_Ambient;             // Offset:    0, size:   16
    float4  gLight_Diffuse;             // Offset:   16, size:   16
    float4  gLight_Specular;            // Offset:   32, size:   16
    float3  gLight_Direction;           // Offset:   48, size:   12
    float3  gLight_PosW;                // Offset:   64, size:   12
}

cbuffer cbMaetrial : register(b2)
{
    float4  gMtrl_Ambient;              // Offset:    0, size:   16
    float4  gMtrl_Diffuse;              // Offset:   16, size:   16
    float4  gMtrl_Specular;             // Offset:   32, size:   16
    float4  gMtrl_Emissive;             // Offset:   48, size:   16
    float   gMtrl_Pow;                  // Offset:   64, size:    4
}

cbuffer cbPerFrameInstancing : register(b3)
{
    float4x4 gWorldInst[256];           // Offset:    0, size: 16384
}

cbuffer cbClipPlane : register(b4)
{
    float4  gClipPlane;                 // Offset:    0, size:   16
}

cbuffer cbSkinning : register(b5)
{
    float4x4 gPalette[64];              // Offset:    0, size: 4096
}

//
// 16 local object(s)
//
Texture2D txDiffuse;
Texture2D txBump;
Texture2D txSpecular;
Texture2D txEmissive;
Texture2D txShadow0;
Texture2D txShadow1;
Texture2D txShadow2;
Texture2D txDepth;
SamplerState samLinear
{
    Filter   = uint(MIN_MAG_MIP_LINEAR /* 21 */);
    AddressU = uint(CLAMP /* 3 */);
    AddressV = uint(CLAMP /* 3 */);
    BorderColor = float4(1, 1, 1, 1);
};
SamplerComparisonState samShadow
{
    Filter   = uint(COMPARISON_MIN_MAG_LINEAR_MIP_POINT /* 148 */);
    AddressU = uint(BORDER /* 4 */);
    AddressV = uint(BORDER /* 4 */);
    AddressW = uint(BORDER /* 4 */);
    BorderColor = float4(1, 1, 1, 1);
    ComparisonFunc = uint(GREATER_EQUAL /* 7 */);
};
SamplerComparisonState samDepth
{
    Filter   = uint(COMPARISON_MIN_MAG_LINEAR_MIP_POINT /* 148 */);
    AddressU = uint(BORDER /* 4 */);
    AddressV = uint(BORDER /* 4 */);
    AddressW = uint(BORDER /* 4 */);
    BorderColor = float4(0, 0, 0, 0);
    ComparisonFunc = uint(LESS_EQUAL /* 4 */);
};
SamplerState samAnis
{
    Filter   = uint(ANISOTROPIC /* 85 */);
    AddressU = uint(WRAP /* 1 */);
    AddressV = uint(WRAP /* 1 */);
};
RasterizerState Depth
{
    DepthBias = uint(10000);
    DepthBiasClamp = float(0);
    SlopeScaledDepthBias = float(1);
};
RasterizerState NoCull
{
    CullMode = uint(NONE /* 1 */);
};
DepthStencilState DepthNormal
{
    DepthFunc = uint(LESS_EQUAL /* 4 */);
    DepthEnable = bool(TRUE /* 1 */);
};
DepthStencilState NoDepthStencil
{
    DepthEnable = bool(FALSE /* 0 */);
};

//
// 1 groups(s)
//
fxgroup
{
    //
    // 8 technique(s)
    //
    technique11 DepthTech
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gView;                    // Offset:   64 Size:    64
                //   float4x4 gProjection;              // Offset:  128 Size:    64
                //   float4x4 gLightView[3];            // Offset:  192 Size:   192 [unused]
                //   float4x4 gLightProj[3];            // Offset:  384 Size:   192 [unused]
                //   float4x4 gLightTT;                 // Offset:  576 Size:    64 [unused]
                //   float3 gEyePosW;                   // Offset:  640 Size:    12
                //
                // }
                //
                // cbuffer cbClipPlane
                // {
                //
                //   float4 gClipPlane;                 // Offset:    0 Size:    16
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbClipPlane                       cbuffer      NA          NA    4        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyzw        0     NONE   float   xyzw
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // SV_InstanceID            0   x           3   INSTID    uint       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // TEXCOORD                 0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 1   xy          2     NONE   float   xy  
                // TEXCOORD                 2   xyzw        3     NONE   float   xyzw
                // TEXCOORD                 3   xyz         4     NONE   float   xyz 
                // SV_ClipDistance          0   x           5  CLIPDST   float   x   
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[41], immediateIndexed
                dcl_constantbuffer cb4[1], immediateIndexed
                dcl_input v0.xyzw
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xy
                dcl_output o3.xyzw
                dcl_output o4.xyz
                dcl_output_siv o5.x, clip_distance
                dcl_temps 6
                //
                // Initial variable locations:
                //   v0.x <- Pos.x; v0.y <- Pos.y; v0.z <- Pos.z; v0.w <- Pos.w; 
                //   v1.x <- Normal.x; v1.y <- Normal.y; v1.z <- Normal.z; 
                //   v2.x <- Tex.x; v2.y <- Tex.y; 
                //   v3.x <- instID; 
                //   o5.x <- <VS return value>.clip; 
                //   o4.x <- <VS return value>.toEye.x; o4.y <- <VS return value>.toEye.y; o4.z <- <VS return value>.toEye.z; 
                //   o3.x <- <VS return value>.PosH.x; o3.y <- <VS return value>.PosH.y; o3.z <- <VS return value>.PosH.z; o3.w <- <VS return value>.PosH.w; 
                //   o2.x <- <VS return value>.Tex.x; o2.y <- <VS return value>.Tex.y; 
                //   o1.x <- <VS return value>.Normal.x; o1.y <- <VS return value>.Normal.y; o1.z <- <VS return value>.Normal.z; 
                //   o0.x <- <VS return value>.Pos.x; o0.y <- <VS return value>.Pos.y; o0.z <- <VS return value>.Pos.z; o0.w <- <VS return value>.Pos.w
                //
                #line 17 "D:\Project\Shader-Practice\Src\ForwardLight_AmbientLight\ForwardLight_AmbientLight\hlsl.fx"
                mov r0.xyzw, cb0[0].xyzw  // r0.x <- mWorld._m00; r0.y <- mWorld._m10; r0.z <- mWorld._m20; r0.w <- mWorld._m30
                mov r1.xyzw, cb0[1].xyzw  // r1.x <- mWorld._m01; r1.y <- mWorld._m11; r1.z <- mWorld._m21; r1.w <- mWorld._m31
                mov r2.xyzw, cb0[2].xyzw  // r2.x <- mWorld._m02; r2.y <- mWorld._m12; r2.z <- mWorld._m22; r2.w <- mWorld._m32
                mov r3.xyzw, cb0[3].xyzw  // r3.x <- mWorld._m03; r3.y <- mWorld._m13; r3.z <- mWorld._m23; r3.w <- mWorld._m33
                dp4 r4.x, v0.xyzw, r0.xyzw  // r4.x <- PosW.x
                dp4 r4.y, v0.xyzw, r1.xyzw  // r4.y <- PosW.y
                dp4 r4.z, v0.xyzw, r2.xyzw  // r4.z <- PosW.z
                dp4 r4.w, v0.xyzw, r3.xyzw  // r4.w <- PosW.w
                dp4 r3.x, r4.xyzw, cb0[4].xyzw  // r3.x <- output.Pos.x
                dp4 r3.y, r4.xyzw, cb0[5].xyzw  // r3.y <- output.Pos.y
                dp4 r3.z, r4.xyzw, cb0[6].xyzw  // r3.z <- output.Pos.z
                dp4 r3.w, r4.xyzw, cb0[7].xyzw  // r3.w <- output.Pos.w
                dp4 r5.x, r3.xyzw, cb0[8].xyzw  // r5.x <- output.Pos.x
                dp4 r5.y, r3.xyzw, cb0[9].xyzw  // r5.y <- output.Pos.y
                dp4 r5.z, r3.xyzw, cb0[10].xyzw  // r5.z <- output.Pos.z
                dp4 r5.w, r3.xyzw, cb0[11].xyzw  // r5.w <- output.Pos.w
                dp3 r0.x, v1.xyzx, r0.xyzx
                dp3 r0.y, v1.xyzx, r1.xyzx
                dp3 r0.z, v1.xyzx, r2.xyzx
                dp3 r0.w, r0.xyzx, r0.xyzx
                rsq r0.w, r0.w
                mul r0.xyz, r0.wwww, r0.xyzx  // r0.x <- output.Normal.x; r0.y <- output.Normal.y; r0.z <- output.Normal.z
                mov r1.xy, v2.xyxx  // r1.x <- output.Tex.x; r1.y <- output.Tex.y
                mov r5.xyzw, r5.xyzw  // r5.x <- output.PosH.x; r5.y <- output.PosH.y; r5.z <- output.PosH.z; r5.w <- output.PosH.w
                itof r0.w, l(1)
                mov r2.xyzw, -r4.xyzw
                add r3.xyz, r2.xyzx, cb0[40].xyzx
                add r3.w, r0.w, r2.w
                dp4 r0.w, r3.xyzw, r3.xyzw
                rsq r0.w, r0.w
                mul r2.xyz, r0.wwww, r3.xyzx  // r2.x <- output.toEye.x; r2.y <- output.toEye.y; r2.z <- output.toEye.z
                dp4 r0.w, r4.xyzw, cb4[0].xyzw  // r0.w <- output.clip
                
                #line 28
                mov o0.xyzw, r5.xyzw
                mov o3.xyzw, r5.xyzw
                mov o1.xyz, r0.xyzx
                mov o4.xyz, r2.xyzx
                mov o2.xy, r1.xyxx
                mov o5.x, r0.w
                ret 
                // Approximately 39 instruction slots used
                            
            };
            GeometryShader = NULL;
            HullShader = NULL;
            DomainShader = NULL;
            PixelShader = NULL;
        }

    }

    technique11 Outline
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gView;                    // Offset:   64 Size:    64
                //   float4x4 gProjection;              // Offset:  128 Size:    64
                //   float4x4 gLightView[3];            // Offset:  192 Size:   192 [unused]
                //   float4x4 gLightProj[3];            // Offset:  384 Size:   192 [unused]
                //   float4x4 gLightTT;                 // Offset:  576 Size:    64 [unused]
                //   float3 gEyePosW;                   // Offset:  640 Size:    12
                //
                // }
                //
                // cbuffer cbClipPlane
                // {
                //
                //   float4 gClipPlane;                 // Offset:    0 Size:    16
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbClipPlane                       cbuffer      NA          NA    4        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyzw        0     NONE   float   xyzw
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // SV_InstanceID            0   x           3   INSTID    uint       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // TEXCOORD                 0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 1   xy          2     NONE   float   xy  
                // TEXCOORD                 2   xyzw        3     NONE   float   xyzw
                // TEXCOORD                 3   xyz         4     NONE   float   xyz 
                // SV_ClipDistance          0   x           5  CLIPDST   float   x   
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[41], immediateIndexed
                dcl_constantbuffer cb4[1], immediateIndexed
                dcl_input v0.xyzw
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xy
                dcl_output o3.xyzw
                dcl_output o4.xyz
                dcl_output_siv o5.x, clip_distance
                dcl_temps 6
                //
                // Initial variable locations:
                //   v0.x <- Pos.x; v0.y <- Pos.y; v0.z <- Pos.z; v0.w <- Pos.w; 
                //   v1.x <- Normal.x; v1.y <- Normal.y; v1.z <- Normal.z; 
                //   v2.x <- Tex.x; v2.y <- Tex.y; 
                //   v3.x <- instID; 
                //   o5.x <- <VS return value>.clip; 
                //   o4.x <- <VS return value>.toEye.x; o4.y <- <VS return value>.toEye.y; o4.z <- <VS return value>.toEye.z; 
                //   o3.x <- <VS return value>.PosH.x; o3.y <- <VS return value>.PosH.y; o3.z <- <VS return value>.PosH.z; o3.w <- <VS return value>.PosH.w; 
                //   o2.x <- <VS return value>.Tex.x; o2.y <- <VS return value>.Tex.y; 
                //   o1.x <- <VS return value>.Normal.x; o1.y <- <VS return value>.Normal.y; o1.z <- <VS return value>.Normal.z; 
                //   o0.x <- <VS return value>.Pos.x; o0.y <- <VS return value>.Pos.y; o0.z <- <VS return value>.Pos.z; o0.w <- <VS return value>.Pos.w
                //
                #line 17 "D:\Project\Shader-Practice\Src\ForwardLight_AmbientLight\ForwardLight_AmbientLight\hlsl.fx"
                mov r0.xyzw, cb0[0].xyzw  // r0.x <- mWorld._m00; r0.y <- mWorld._m10; r0.z <- mWorld._m20; r0.w <- mWorld._m30
                mov r1.xyzw, cb0[1].xyzw  // r1.x <- mWorld._m01; r1.y <- mWorld._m11; r1.z <- mWorld._m21; r1.w <- mWorld._m31
                mov r2.xyzw, cb0[2].xyzw  // r2.x <- mWorld._m02; r2.y <- mWorld._m12; r2.z <- mWorld._m22; r2.w <- mWorld._m32
                mov r3.xyzw, cb0[3].xyzw  // r3.x <- mWorld._m03; r3.y <- mWorld._m13; r3.z <- mWorld._m23; r3.w <- mWorld._m33
                dp4 r4.x, v0.xyzw, r0.xyzw  // r4.x <- PosW.x
                dp4 r4.y, v0.xyzw, r1.xyzw  // r4.y <- PosW.y
                dp4 r4.z, v0.xyzw, r2.xyzw  // r4.z <- PosW.z
                dp4 r4.w, v0.xyzw, r3.xyzw  // r4.w <- PosW.w
                dp4 r3.x, r4.xyzw, cb0[4].xyzw  // r3.x <- output.Pos.x
                dp4 r3.y, r4.xyzw, cb0[5].xyzw  // r3.y <- output.Pos.y
                dp4 r3.z, r4.xyzw, cb0[6].xyzw  // r3.z <- output.Pos.z
                dp4 r3.w, r4.xyzw, cb0[7].xyzw  // r3.w <- output.Pos.w
                dp4 r5.x, r3.xyzw, cb0[8].xyzw  // r5.x <- output.Pos.x
                dp4 r5.y, r3.xyzw, cb0[9].xyzw  // r5.y <- output.Pos.y
                dp4 r5.z, r3.xyzw, cb0[10].xyzw  // r5.z <- output.Pos.z
                dp4 r5.w, r3.xyzw, cb0[11].xyzw  // r5.w <- output.Pos.w
                dp3 r0.x, v1.xyzx, r0.xyzx
                dp3 r0.y, v1.xyzx, r1.xyzx
                dp3 r0.z, v1.xyzx, r2.xyzx
                dp3 r0.w, r0.xyzx, r0.xyzx
                rsq r0.w, r0.w
                mul r0.xyz, r0.wwww, r0.xyzx  // r0.x <- output.Normal.x; r0.y <- output.Normal.y; r0.z <- output.Normal.z
                mov r1.xy, v2.xyxx  // r1.x <- output.Tex.x; r1.y <- output.Tex.y
                mov r5.xyzw, r5.xyzw  // r5.x <- output.PosH.x; r5.y <- output.PosH.y; r5.z <- output.PosH.z; r5.w <- output.PosH.w
                itof r0.w, l(1)
                mov r2.xyzw, -r4.xyzw
                add r3.xyz, r2.xyzx, cb0[40].xyzx
                add r3.w, r0.w, r2.w
                dp4 r0.w, r3.xyzw, r3.xyzw
                rsq r0.w, r0.w
                mul r2.xyz, r0.wwww, r3.xyzx  // r2.x <- output.toEye.x; r2.y <- output.toEye.y; r2.z <- output.toEye.z
                dp4 r0.w, r4.xyzw, cb4[0].xyzw  // r0.w <- output.clip
                
                #line 28
                mov o0.xyzw, r5.xyzw
                mov o3.xyzw, r5.xyzw
                mov o1.xyz, r0.xyzx
                mov o4.xyz, r2.xyzx
                mov o2.xy, r1.xyxx
                mov o5.x, r0.w
                ret 
                // Approximately 39 instruction slots used
                            
            };
            GeometryShader = NULL;
            HullShader = NULL;
            DomainShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer $Globals
                // {
                //
                //   float4 g_outlineColor;             // Offset:    0 Size:    16
                //      = 0x3f4ccccd 0x00000000 0x00000000 0x3f800000 
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samDepth                        sampler_c      NA          NA    2        1
                // txDepth                           texture  float4          2d    7        1
                // $Globals                          cbuffer      NA          NA    6        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // TEXCOORD                 0   xyz         1     NONE   float       
                // TEXCOORD                 1   xy          2     NONE   float       
                // TEXCOORD                 2   xyzw        3     NONE   float   xy w
                // TEXCOORD                 3   xyz         4     NONE   float       
                // SV_ClipDistance          0   x           5  CLIPDST   float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb6[1], immediateIndexed
                dcl_sampler s2, mode_comparison
                dcl_resource_texture2d (float,float,float,float) t7
                dcl_input_ps linear v3.xyw
                dcl_output o0.xyzw
                dcl_temps 2
                dcl_indexableTemp x0[9], 4
                //
                // Initial variable locations:
                //   v0.x <- In.Pos.x; v0.y <- In.Pos.y; v0.z <- In.Pos.z; v0.w <- In.Pos.w; 
                //   v1.x <- In.Normal.x; v1.y <- In.Normal.y; v1.z <- In.Normal.z; 
                //   v2.x <- In.Tex.x; v2.y <- In.Tex.y; 
                //   v3.x <- In.PosH.x; v3.y <- In.PosH.y; v3.z <- In.PosH.z; v3.w <- In.PosH.w; 
                //   v4.x <- In.toEye.x; v4.y <- In.toEye.y; v4.z <- In.toEye.z; 
                //   v5.x <- In.clip; 
                //   o0.x <- <PS_Outline return value>.x; o0.y <- <PS_Outline return value>.y; o0.z <- <PS_Outline return value>.z; o0.w <- <PS_Outline return value>.w
                //
                #line 49 "D:\Project\Shader-Practice\Src\ForwardLight_AmbientLight\ForwardLight_AmbientLight\hlsl.fx"
                nop 
                mov r0.xyz, v3.xywx
                
                #line 348 "D:\Project\Shader-Practice\Src\ForwardLight_AmbientLight\ForwardLight_AmbientLight\common.fx"
                div r0.x, r0.x, r0.z
                itof r0.w, l(1)
                add r0.x, r0.w, r0.x
                mul r1.x, r0.x, l(0.500000)  // r1.x <- coords.x
                itof r0.x, l(1)
                div r0.y, r0.y, r0.z
                itof r0.z, l(1)
                add r0.y, r0.z, r0.y
                mul r0.y, r0.y, l(0.500000)
                mov r0.y, -r0.y
                add r1.y, r0.y, r0.x  // r1.y <- coords.y
                mov r0.x, l(0.001908)  // r0.x <- dx
                mov x0[0].xy, r1.xyxx
                add r1.zw, r1.xxxy, l(0.000000, 0.000000, -0.001908, 0.000000)
                mov x0[1].xy, r1.zwzz
                mov r0.y, l(0)
                add r1.zw, r0.xxxy, r1.xxxy
                mov x0[2].xy, r1.zwzz
                add r1.zw, r1.xxxy, l(0.000000, 0.000000, 0.000000, -0.001908)
                mov x0[3].xy, r1.zwzz
                add r0.yw, r0.yyyx, r1.xxxy
                mov x0[6].xy, r0.ywyy
                add r0.yw, r1.xxxy, l(0.000000, -0.001908, 0.000000, -0.001908)
                mov x0[4].xy, r0.ywyy
                
                #line 359
                mov r0.z, l(-0.001908)
                add r0.yw, r0.xxxz, r1.xxxy
                mov x0[5].xy, r0.ywyy
                add r0.yz, r0.zzxz, r1.xxyx
                mov x0[7].xy, r0.yzyy
                add r0.xy, r0.xxxx, r1.xyxx
                mov x0[8].xy, r0.xyxx
                mov r0.x, l(0)  // r0.x <- fOutline
                mov r0.y, l(0)  // r0.y <- i
                mov r0.z, r0.x  // r0.z <- fOutline
                mov r0.w, r0.y  // r0.w <- i
                loop 
                  ilt r1.x, r0.w, l(9)
                  breakc_z r1.x
                  mov r1.xy, x0[r0.w + 0].xyxx
                  itof r1.z, l(1)
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r1.x, r1.xyxx, t7.xxxx, s2, r1.z
                  add r0.z, r0.z, r1.x
                  iadd r0.w, r0.w, l(1)
                endloop 
                div r0.x, r0.z, l(9.000000)  // r0.x <- fOutline
                
                #line 370
                mov r0.x, r0.x  // r0.x <- <GetOutline return value>
                
                #line 49 "D:\Project\Shader-Practice\Src\ForwardLight_AmbientLight\ForwardLight_AmbientLight\hlsl.fx"
                mov r0.x, r0.x  // r0.x <- fOutline
                mov r0.y, l(-0.000001)
                add r0.y, r0.y, r0.x
                lt r0.y, r0.y, l(0.000000)
                and r0.y, r0.y, l(-1)
                discard_nz r0.y
                nop 
                mov r0.x, r0.x
                
                #line 377 "D:\Project\Shader-Practice\Src\ForwardLight_AmbientLight\ForwardLight_AmbientLight\common.fx"
                mul r0.w, r0.x, l(2.500000)  // r0.w <- <GetOutlineColor return value>.w
                mov r0.xyz, cb6[0].xyzx  // r0.x <- <GetOutlineColor return value>.x; r0.y <- <GetOutlineColor return value>.y; r0.z <- <GetOutlineColor return value>.z
                
                #line 51 "D:\Project\Shader-Practice\Src\ForwardLight_AmbientLight\ForwardLight_AmbientLight\hlsl.fx"
                mov o0.xyzw, r0.xyzw
                ret 
                // Approximately 60 instruction slots used
                            
            };
        }

    }

    technique11 Unlit
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gView;                    // Offset:   64 Size:    64
                //   float4x4 gProjection;              // Offset:  128 Size:    64
                //   float4x4 gLightView[3];            // Offset:  192 Size:   192 [unused]
                //   float4x4 gLightProj[3];            // Offset:  384 Size:   192 [unused]
                //   float4x4 gLightTT;                 // Offset:  576 Size:    64 [unused]
                //   float3 gEyePosW;                   // Offset:  640 Size:    12
                //
                // }
                //
                // cbuffer cbClipPlane
                // {
                //
                //   float4 gClipPlane;                 // Offset:    0 Size:    16
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbClipPlane                       cbuffer      NA          NA    4        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyzw        0     NONE   float   xyzw
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // SV_InstanceID            0   x           3   INSTID    uint       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // TEXCOORD                 0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 1   xy          2     NONE   float   xy  
                // TEXCOORD                 2   xyzw        3     NONE   float   xyzw
                // TEXCOORD                 3   xyz         4     NONE   float   xyz 
                // SV_ClipDistance          0   x           5  CLIPDST   float   x   
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[41], immediateIndexed
                dcl_constantbuffer cb4[1], immediateIndexed
                dcl_input v0.xyzw
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xy
                dcl_output o3.xyzw
                dcl_output o4.xyz
                dcl_output_siv o5.x, clip_distance
                dcl_temps 6
                //
                // Initial variable locations:
                //   v0.x <- Pos.x; v0.y <- Pos.y; v0.z <- Pos.z; v0.w <- Pos.w; 
                //   v1.x <- Normal.x; v1.y <- Normal.y; v1.z <- Normal.z; 
                //   v2.x <- Tex.x; v2.y <- Tex.y; 
                //   v3.x <- instID; 
                //   o5.x <- <VS return value>.clip; 
                //   o4.x <- <VS return value>.toEye.x; o4.y <- <VS return value>.toEye.y; o4.z <- <VS return value>.toEye.z; 
                //   o3.x <- <VS return value>.PosH.x; o3.y <- <VS return value>.PosH.y; o3.z <- <VS return value>.PosH.z; o3.w <- <VS return value>.PosH.w; 
                //   o2.x <- <VS return value>.Tex.x; o2.y <- <VS return value>.Tex.y; 
                //   o1.x <- <VS return value>.Normal.x; o1.y <- <VS return value>.Normal.y; o1.z <- <VS return value>.Normal.z; 
                //   o0.x <- <VS return value>.Pos.x; o0.y <- <VS return value>.Pos.y; o0.z <- <VS return value>.Pos.z; o0.w <- <VS return value>.Pos.w
                //
                #line 17 "D:\Project\Shader-Practice\Src\ForwardLight_AmbientLight\ForwardLight_AmbientLight\hlsl.fx"
                mov r0.xyzw, cb0[0].xyzw  // r0.x <- mWorld._m00; r0.y <- mWorld._m10; r0.z <- mWorld._m20; r0.w <- mWorld._m30
                mov r1.xyzw, cb0[1].xyzw  // r1.x <- mWorld._m01; r1.y <- mWorld._m11; r1.z <- mWorld._m21; r1.w <- mWorld._m31
                mov r2.xyzw, cb0[2].xyzw  // r2.x <- mWorld._m02; r2.y <- mWorld._m12; r2.z <- mWorld._m22; r2.w <- mWorld._m32
                mov r3.xyzw, cb0[3].xyzw  // r3.x <- mWorld._m03; r3.y <- mWorld._m13; r3.z <- mWorld._m23; r3.w <- mWorld._m33
                dp4 r4.x, v0.xyzw, r0.xyzw  // r4.x <- PosW.x
                dp4 r4.y, v0.xyzw, r1.xyzw  // r4.y <- PosW.y
                dp4 r4.z, v0.xyzw, r2.xyzw  // r4.z <- PosW.z
                dp4 r4.w, v0.xyzw, r3.xyzw  // r4.w <- PosW.w
                dp4 r3.x, r4.xyzw, cb0[4].xyzw  // r3.x <- output.Pos.x
                dp4 r3.y, r4.xyzw, cb0[5].xyzw  // r3.y <- output.Pos.y
                dp4 r3.z, r4.xyzw, cb0[6].xyzw  // r3.z <- output.Pos.z
                dp4 r3.w, r4.xyzw, cb0[7].xyzw  // r3.w <- output.Pos.w
                dp4 r5.x, r3.xyzw, cb0[8].xyzw  // r5.x <- output.Pos.x
                dp4 r5.y, r3.xyzw, cb0[9].xyzw  // r5.y <- output.Pos.y
                dp4 r5.z, r3.xyzw, cb0[10].xyzw  // r5.z <- output.Pos.z
                dp4 r5.w, r3.xyzw, cb0[11].xyzw  // r5.w <- output.Pos.w
                dp3 r0.x, v1.xyzx, r0.xyzx
                dp3 r0.y, v1.xyzx, r1.xyzx
                dp3 r0.z, v1.xyzx, r2.xyzx
                dp3 r0.w, r0.xyzx, r0.xyzx
                rsq r0.w, r0.w
                mul r0.xyz, r0.wwww, r0.xyzx  // r0.x <- output.Normal.x; r0.y <- output.Normal.y; r0.z <- output.Normal.z
                mov r1.xy, v2.xyxx  // r1.x <- output.Tex.x; r1.y <- output.Tex.y
                mov r5.xyzw, r5.xyzw  // r5.x <- output.PosH.x; r5.y <- output.PosH.y; r5.z <- output.PosH.z; r5.w <- output.PosH.w
                itof r0.w, l(1)
                mov r2.xyzw, -r4.xyzw
                add r3.xyz, r2.xyzx, cb0[40].xyzx
                add r3.w, r0.w, r2.w
                dp4 r0.w, r3.xyzw, r3.xyzw
                rsq r0.w, r0.w
                mul r2.xyz, r0.wwww, r3.xyzx  // r2.x <- output.toEye.x; r2.y <- output.toEye.y; r2.z <- output.toEye.z
                dp4 r0.w, r4.xyzw, cb4[0].xyzw  // r0.w <- output.clip
                
                #line 28
                mov o0.xyzw, r5.xyzw
                mov o3.xyzw, r5.xyzw
                mov o1.xyz, r0.xyzx
                mov o4.xyz, r2.xyzx
                mov o2.xy, r1.xyxx
                mov o5.x, r0.w
                ret 
                // Approximately 39 instruction slots used
                            
            };
            GeometryShader = NULL;
            HullShader = NULL;
            DomainShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbLight
                // {
                //
                //   float4 gLight_Ambient;             // Offset:    0 Size:    16
                //   float4 gLight_Diffuse;             // Offset:   16 Size:    16
                //   float4 gLight_Specular;            // Offset:   32 Size:    16
                //   float3 gLight_Direction;           // Offset:   48 Size:    12
                //   float3 gLight_PosW;                // Offset:   64 Size:    12 [unused]
                //
                // }
                //
                // cbuffer cbMaetrial
                // {
                //
                //   float4 gMtrl_Ambient;              // Offset:    0 Size:    16
                //   float4 gMtrl_Diffuse;              // Offset:   16 Size:    16
                //   float4 gMtrl_Specular;             // Offset:   32 Size:    16
                //   float4 gMtrl_Emissive;             // Offset:   48 Size:    16 [unused]
                //   float gMtrl_Pow;                   // Offset:   64 Size:     4
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samLinear                         sampler      NA          NA    0        1
                // txDiffuse                         texture  float4          2d    0        1
                // cbLight                           cbuffer      NA          NA    1        1
                // cbMaetrial                        cbuffer      NA          NA    2        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // TEXCOORD                 0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 1   xy          2     NONE   float   xy  
                // TEXCOORD                 2   xyzw        3     NONE   float       
                // TEXCOORD                 3   xyz         4     NONE   float   xyz 
                // SV_ClipDistance          0   x           5  CLIPDST   float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb1[4], immediateIndexed
                dcl_constantbuffer cb2[5], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xy
                dcl_input_ps linear v4.xyz
                dcl_output o0.xyzw
                dcl_temps 4
                //
                // Initial variable locations:
                //   v0.x <- In.Pos.x; v0.y <- In.Pos.y; v0.z <- In.Pos.z; v0.w <- In.Pos.w; 
                //   v1.x <- In.Normal.x; v1.y <- In.Normal.y; v1.z <- In.Normal.z; 
                //   v2.x <- In.Tex.x; v2.y <- In.Tex.y; 
                //   v3.x <- In.PosH.x; v3.y <- In.PosH.y; v3.z <- In.PosH.z; v3.w <- In.PosH.w; 
                //   v4.x <- In.toEye.x; v4.y <- In.toEye.y; v4.z <- In.toEye.z; 
                //   v5.x <- In.clip; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 37 "D:\Project\Shader-Practice\Src\ForwardLight_AmbientLight\ForwardLight_AmbientLight\hlsl.fx"
                nop 
                
                #line 384 "D:\Project\Shader-Practice\Src\ForwardLight_AmbientLight\ForwardLight_AmbientLight\common.fx"
                mov r0.xyz, -cb1[3].xyzx  // r0.x <- L.x; r0.y <- L.y; r0.z <- L.z
                dp3 r0.w, v4.xyzx, v4.xyzx
                rsq r0.w, r0.w
                mul r1.xyz, r0.wwww, v4.xyzx
                add r1.xyz, r0.xyzx, r1.xyzx
                dp3 r0.w, r1.xyzx, r1.xyzx
                rsq r0.w, r0.w
                mul r1.xyz, r0.wwww, r1.xyzx  // r1.x <- H.x; r1.y <- H.y; r1.z <- H.z
                dp3 r0.w, v1.xyzx, v1.xyzx
                rsq r0.w, r0.w
                mul r2.xyz, r0.wwww, v1.xyzx  // r2.x <- N.x; r2.y <- N.y; r2.z <- N.z
                itof r0.w, l(0)
                dp3 r0.x, r2.xyzx, r0.xyzx
                max r0.x, r0.x, r0.w  // r0.x <- lightV
                mul r0.yzw, cb1[0].xxyz, cb2[0].xxyz
                mul r3.xyz, cb1[1].xyzx, cb2[1].xyzx
                mul r3.xyz, r3.xyzx, l(0.100000, 0.100000, 0.100000, 0.000000)
                add r0.yzw, r0.yyzw, r3.xxyz
                mul r3.xyz, cb1[1].xyzx, cb2[1].xyzx
                mul r3.xyz, r0.xxxx, r3.xyzx
                mul r3.xyz, r3.xyzx, l(0.100000, 0.100000, 0.100000, 0.000000)
                add r0.yzw, r0.yyzw, r3.xxyz
                mul r3.xyz, cb1[1].xyzx, cb2[1].xyzx
                mul r3.xyz, r0.xxxx, r3.xyzx
                mul r3.xyz, r3.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
                mul r3.xyz, r3.xyzx, l(0.900000, 0.900000, 0.900000, 0.000000)
                add r0.xyz, r0.yzwy, r3.xyzx
                mul r3.xyz, cb1[2].xyzx, cb2[2].xyzx
                itof r0.w, l(0)
                dp3 r1.x, r2.xyzx, r1.xyzx
                max r0.w, r0.w, r1.x
                log r0.w, r0.w
                mul r0.w, r0.w, cb2[4].x
                exp r0.w, r0.w
                mul r1.xyz, r0.wwww, r3.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- color.x; r0.y <- color.y; r0.z <- color.z
                
                #line 395
                mov r0.xyz, r0.xyzx  // r0.x <- <GetLightingColor return value>.x; r0.y <- <GetLightingColor return value>.y; r0.z <- <GetLightingColor return value>.z
                
                #line 37 "D:\Project\Shader-Practice\Src\ForwardLight_AmbientLight\ForwardLight_AmbientLight\hlsl.fx"
                mov r0.xyz, r0.xyzx  // r0.x <- color.x; r0.y <- color.y; r0.z <- color.z
                sample_indexable(texture2d)(float,float,float,float) r1.xyzw, v2.xyxx, t0.xyzw, s0  // r1.x <- texColor.x; r1.y <- texColor.y; r1.z <- texColor.z; r1.w <- texColor.w
                mul r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- Out.x; r0.y <- Out.y; r0.z <- Out.z
                mul o0.w, r1.w, cb2[1].w
                mov o0.xyz, r0.xyzx
                ret 
                // Approximately 44 instruction slots used
                            
            };
        }

    }

    technique11 ShadowMap
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gView;                    // Offset:   64 Size:    64
                //   float4x4 gProjection;              // Offset:  128 Size:    64
                //   float4x4 gLightView[3];            // Offset:  192 Size:   192
                //   float4x4 gLightProj[3];            // Offset:  384 Size:   192
                //   float4x4 gLightTT;                 // Offset:  576 Size:    64
                //   float3 gEyePosW;                   // Offset:  640 Size:    12
                //
                // }
                //
                // cbuffer cbClipPlane
                // {
                //
                //   float4 gClipPlane;                 // Offset:    0 Size:    16
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbClipPlane                       cbuffer      NA          NA    4        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyzw        0     NONE   float   xyzw
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // SV_InstanceID            0   x           3   INSTID    uint       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // COLOR                    0   xyzw        2     NONE   float   xyzw
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 7     zw        3     NONE   float     zw
                // TEXCOORD                 1   xyzw        4     NONE   float   xyzw
                // TEXCOORD                 2   xyzw        5     NONE   float   xyzw
                // TEXCOORD                 3   xyzw        6     NONE   float   xyzw
                // TEXCOORD                 4   xyzw        7     NONE   float   xyzw
                // TEXCOORD                 5   xyz         8     NONE   float   xyz 
                // TEXCOORD                 6   xyzw        9     NONE   float   xyzw
                // SV_ClipDistance          0   x          10  CLIPDST   float   x   
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[41], immediateIndexed
                dcl_constantbuffer cb4[1], immediateIndexed
                dcl_input v0.xyzw
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyzw
                dcl_output o3.xy
                dcl_output o3.zw
                dcl_output o4.xyzw
                dcl_output o5.xyzw
                dcl_output o6.xyzw
                dcl_output o7.xyzw
                dcl_output o8.xyz
                dcl_output o9.xyzw
                dcl_output_siv o10.x, clip_distance
                dcl_temps 12
                dcl_indexableTemp x0[12], 4
                dcl_indexableTemp x1[12], 4
                //
                // Initial variable locations:
                //   v0.x <- Pos.x; v0.y <- Pos.y; v0.z <- Pos.z; v0.w <- Pos.w; 
                //   v1.x <- Normal.x; v1.y <- Normal.y; v1.z <- Normal.z; 
                //   v2.x <- Tex.x; v2.y <- Tex.y; 
                //   v3.x <- instID; 
                //   o10.x <- <VS_ShadowMap return value>.clip; 
                //   o9.x <- <VS_ShadowMap return value>.Depth0.x; o9.y <- <VS_ShadowMap return value>.Depth0.y; o9.z <- <VS_ShadowMap return value>.Depth0.z; o9.w <- <VS_ShadowMap return value>.Depth0.w; 
                //   o8.x <- <VS_ShadowMap return value>.toEye.x; o8.y <- <VS_ShadowMap return value>.toEye.y; o8.z <- <VS_ShadowMap return value>.toEye.z; 
                //   o7.x <- <VS_ShadowMap return value>.PosH.x; o7.y <- <VS_ShadowMap return value>.PosH.y; o7.z <- <VS_ShadowMap return value>.PosH.z; o7.w <- <VS_ShadowMap return value>.PosH.w; 
                //   o6.x <- <VS_ShadowMap return value>.TexShadow2.x; o6.y <- <VS_ShadowMap return value>.TexShadow2.y; o6.z <- <VS_ShadowMap return value>.TexShadow2.z; o6.w <- <VS_ShadowMap return value>.TexShadow2.w; 
                //   o5.x <- <VS_ShadowMap return value>.TexShadow1.x; o5.y <- <VS_ShadowMap return value>.TexShadow1.y; o5.z <- <VS_ShadowMap return value>.TexShadow1.z; o5.w <- <VS_ShadowMap return value>.TexShadow1.w; 
                //   o4.x <- <VS_ShadowMap return value>.TexShadow0.x; o4.y <- <VS_ShadowMap return value>.TexShadow0.y; o4.z <- <VS_ShadowMap return value>.TexShadow0.z; o4.w <- <VS_ShadowMap return value>.TexShadow0.w; 
                //   o3.x <- <VS_ShadowMap return value>.Tex.x; o3.y <- <VS_ShadowMap return value>.Tex.y; o3.z <- <VS_ShadowMap return value>.Depth1.x; o3.w <- <VS_ShadowMap return value>.Depth1.y; 
                //   o2.x <- <VS_ShadowMap return value>.Color.x; o2.y <- <VS_ShadowMap return value>.Color.y; o2.z <- <VS_ShadowMap return value>.Color.z; o2.w <- <VS_ShadowMap return value>.Color.w; 
                //   o1.x <- <VS_ShadowMap return value>.Normal.x; o1.y <- <VS_ShadowMap return value>.Normal.y; o1.z <- <VS_ShadowMap return value>.Normal.z; 
                //   o0.x <- <VS_ShadowMap return value>.Pos.x; o0.y <- <VS_ShadowMap return value>.Pos.y; o0.z <- <VS_ShadowMap return value>.Pos.z; o0.w <- <VS_ShadowMap return value>.Pos.w; 
                //   x0 <- mLVP; x1 <- mVPT
                //
                #line 65 "D:\Project\Shader-Practice\Src\ForwardLight_AmbientLight\ForwardLight_AmbientLight\hlsl.fx"
                itof r0.xyzw, l(0, 0, 0, 0)  // r0.x <- output.Color.x; r0.y <- output.Color.y; r0.z <- output.Color.z; r0.w <- output.Color.w
                mov r1.xyzw, cb0[0].xyzw  // r1.x <- mWorld._m00; r1.y <- mWorld._m10; r1.z <- mWorld._m20; r1.w <- mWorld._m30
                mov r2.xyzw, cb0[1].xyzw  // r2.x <- mWorld._m01; r2.y <- mWorld._m11; r2.z <- mWorld._m21; r2.w <- mWorld._m31
                mov r3.xyzw, cb0[2].xyzw  // r3.x <- mWorld._m02; r3.y <- mWorld._m12; r3.z <- mWorld._m22; r3.w <- mWorld._m32
                mov r4.xyzw, cb0[3].xyzw  // r4.x <- mWorld._m03; r4.y <- mWorld._m13; r4.z <- mWorld._m23; r4.w <- mWorld._m33
                dp4 r5.x, v0.xyzw, r1.xyzw  // r5.x <- PosW.x
                dp4 r5.y, v0.xyzw, r2.xyzw  // r5.y <- PosW.y
                dp4 r5.z, v0.xyzw, r3.xyzw  // r5.z <- PosW.z
                dp4 r5.w, v0.xyzw, r4.xyzw  // r5.w <- PosW.w
                dp4 r4.x, r5.xyzw, cb0[4].xyzw  // r4.x <- output.Pos.x
                dp4 r4.y, r5.xyzw, cb0[5].xyzw  // r4.y <- output.Pos.y
                dp4 r4.z, r5.xyzw, cb0[6].xyzw  // r4.z <- output.Pos.z
                dp4 r4.w, r5.xyzw, cb0[7].xyzw  // r4.w <- output.Pos.w
                dp4 r6.x, r4.xyzw, cb0[8].xyzw  // r6.x <- output.Pos.x
                dp4 r6.y, r4.xyzw, cb0[9].xyzw  // r6.y <- output.Pos.y
                dp4 r6.z, r4.xyzw, cb0[10].xyzw  // r6.z <- output.Pos.z
                dp4 r6.w, r4.xyzw, cb0[11].xyzw  // r6.w <- output.Pos.w
                dp3 r1.x, v1.xyzx, r1.xyzx
                dp3 r1.y, v1.xyzx, r2.xyzx
                dp3 r1.z, v1.xyzx, r3.xyzx
                dp3 r1.w, r1.xyzx, r1.xyzx
                rsq r1.w, r1.w
                mul r1.xyz, r1.wwww, r1.xyzx  // r1.x <- output.Normal.x; r1.y <- output.Normal.y; r1.z <- output.Normal.z
                mov r2.xy, v2.xyxx  // r2.x <- output.Tex.x; r2.y <- output.Tex.y
                mov r6.xyzw, r6.xyzw  // r6.x <- output.PosH.x; r6.y <- output.PosH.y; r6.z <- output.PosH.z; r6.w <- output.PosH.w
                itof r1.w, l(1)
                mov r3.xyzw, -r5.xyzw
                add r4.xyz, r3.xyzx, cb0[40].xyzx
                add r4.w, r1.w, r3.w
                dp4 r1.w, r4.xyzw, r4.xyzw
                rsq r1.w, r1.w
                mul r3.xyz, r1.wwww, r4.xyzx  // r3.x <- output.toEye.x; r3.y <- output.toEye.y; r3.z <- output.toEye.z
                
                #line 79
                mul r4.xyzw, cb0[12].xyzw, cb0[24].xxxx
                mul r7.xyzw, cb0[13].xyzw, cb0[24].yyyy
                add r4.xyzw, r4.xyzw, r7.xyzw
                mul r7.xyzw, cb0[14].xyzw, cb0[24].zzzz
                add r4.xyzw, r4.xyzw, r7.xyzw
                mul r7.xyzw, cb0[15].xyzw, cb0[24].wwww
                add r4.xyzw, r4.xyzw, r7.xyzw
                mul r7.xyzw, cb0[12].xyzw, cb0[25].xxxx
                mul r8.xyzw, cb0[13].xyzw, cb0[25].yyyy
                add r7.xyzw, r7.xyzw, r8.xyzw
                mul r8.xyzw, cb0[14].xyzw, cb0[25].zzzz
                add r7.xyzw, r7.xyzw, r8.xyzw
                mul r8.xyzw, cb0[15].xyzw, cb0[25].wwww
                add r7.xyzw, r7.xyzw, r8.xyzw
                mul r8.xyzw, cb0[12].xyzw, cb0[26].xxxx
                mul r9.xyzw, cb0[13].xyzw, cb0[26].yyyy
                add r8.xyzw, r8.xyzw, r9.xyzw
                mul r9.xyzw, cb0[14].xyzw, cb0[26].zzzz
                add r8.xyzw, r8.xyzw, r9.xyzw
                mul r9.xyzw, cb0[15].xyzw, cb0[26].wwww
                add r8.xyzw, r8.xyzw, r9.xyzw
                mul r9.xyzw, cb0[12].xyzw, cb0[27].xxxx
                mul r10.xyzw, cb0[13].xyzw, cb0[27].yyyy
                add r9.xyzw, r9.xyzw, r10.xyzw
                mul r10.xyzw, cb0[14].xyzw, cb0[27].zzzz
                add r9.xyzw, r9.xyzw, r10.xyzw
                mul r10.xyzw, cb0[15].xyzw, cb0[27].wwww
                add r9.xyzw, r9.xyzw, r10.xyzw
                mov x0[0].x, r4.x
                mov x0[1].x, r7.x
                mov x0[2].x, r8.x
                mov x0[3].x, r9.x
                mov x0[0].y, r4.y
                mov x0[1].y, r7.y
                mov x0[2].y, r8.y
                mov x0[3].y, r9.y
                mov x0[0].z, r4.z
                mov x0[1].z, r7.z
                mov x0[2].z, r8.z
                mov x0[3].z, r9.z
                mov x0[0].w, r4.w
                mov x0[1].w, r7.w
                mov x0[2].w, r8.w
                mov x0[3].w, r9.w
                mov r4.x, x0[0].x
                mov r4.y, x0[1].x
                mov r4.z, x0[2].x
                mov r4.w, x0[3].x
                mov r7.x, x0[0].y
                mov r7.y, x0[1].y
                mov r7.z, x0[2].y
                mov r7.w, x0[3].y
                mov r8.x, x0[0].z
                mov r8.y, x0[1].z
                mov r8.z, x0[2].z
                mov r8.w, x0[3].z
                mov r9.x, x0[0].w
                mov r9.y, x0[1].w
                mov r9.z, x0[2].w
                mov r9.w, x0[3].w
                dp4 r1.w, r4.xyzw, cb0[36].xyzw
                dp4 r2.z, r4.xyzw, cb0[37].xyzw
                dp4 r2.w, r4.xyzw, cb0[38].xyzw
                dp4 r3.w, r4.xyzw, cb0[39].xyzw
                dp4 r4.x, r7.xyzw, cb0[36].xyzw
                dp4 r4.y, r7.xyzw, cb0[37].xyzw
                dp4 r4.z, r7.xyzw, cb0[38].xyzw
                dp4 r4.w, r7.xyzw, cb0[39].xyzw
                dp4 r7.x, r8.xyzw, cb0[36].xyzw
                dp4 r7.y, r8.xyzw, cb0[37].xyzw
                dp4 r7.z, r8.xyzw, cb0[38].xyzw
                dp4 r7.w, r8.xyzw, cb0[39].xyzw
                dp4 r8.x, r9.xyzw, cb0[36].xyzw
                dp4 r8.y, r9.xyzw, cb0[37].xyzw
                dp4 r8.z, r9.xyzw, cb0[38].xyzw
                dp4 r8.w, r9.xyzw, cb0[39].xyzw
                mov x1[0].x, r1.w
                mov x1[1].x, r2.z
                mov x1[2].x, r2.w
                mov x1[3].x, r3.w
                mov x1[0].y, r4.x
                mov x1[1].y, r4.y
                mov x1[2].y, r4.z
                mov x1[3].y, r4.w
                mov x1[0].z, r7.x
                mov x1[1].z, r7.y
                mov x1[2].z, r7.z
                mov x1[3].z, r7.w
                mov x1[0].w, r8.x
                mov x1[1].w, r8.y
                mov x1[2].w, r8.z
                mov x1[3].w, r8.w
                mul r4.xyzw, cb0[16].xyzw, cb0[28].xxxx
                mul r7.xyzw, cb0[17].xyzw, cb0[28].yyyy
                add r4.xyzw, r4.xyzw, r7.xyzw
                mul r7.xyzw, cb0[18].xyzw, cb0[28].zzzz
                add r4.xyzw, r4.xyzw, r7.xyzw
                mul r7.xyzw, cb0[19].xyzw, cb0[28].wwww
                add r4.xyzw, r4.xyzw, r7.xyzw
                mul r7.xyzw, cb0[16].xyzw, cb0[29].xxxx
                mul r8.xyzw, cb0[17].xyzw, cb0[29].yyyy
                add r7.xyzw, r7.xyzw, r8.xyzw
                mul r8.xyzw, cb0[18].xyzw, cb0[29].zzzz
                add r7.xyzw, r7.xyzw, r8.xyzw
                mul r8.xyzw, cb0[19].xyzw, cb0[29].wwww
                add r7.xyzw, r7.xyzw, r8.xyzw
                mul r8.xyzw, cb0[16].xyzw, cb0[30].xxxx
                mul r9.xyzw, cb0[17].xyzw, cb0[30].yyyy
                add r8.xyzw, r8.xyzw, r9.xyzw
                mul r9.xyzw, cb0[18].xyzw, cb0[30].zzzz
                add r8.xyzw, r8.xyzw, r9.xyzw
                mul r9.xyzw, cb0[19].xyzw, cb0[30].wwww
                add r8.xyzw, r8.xyzw, r9.xyzw
                mul r9.xyzw, cb0[16].xyzw, cb0[31].xxxx
                mul r10.xyzw, cb0[17].xyzw, cb0[31].yyyy
                add r9.xyzw, r9.xyzw, r10.xyzw
                mul r10.xyzw, cb0[18].xyzw, cb0[31].zzzz
                add r9.xyzw, r9.xyzw, r10.xyzw
                mul r10.xyzw, cb0[19].xyzw, cb0[31].wwww
                add r9.xyzw, r9.xyzw, r10.xyzw
                mov x0[4].x, r4.x
                mov x0[5].x, r7.x
                mov x0[6].x, r8.x
                mov x0[7].x, r9.x
                mov x0[4].y, r4.y
                mov x0[5].y, r7.y
                mov x0[6].y, r8.y
                mov x0[7].y, r9.y
                mov x0[4].z, r4.z
                mov x0[5].z, r7.z
                mov x0[6].z, r8.z
                mov x0[7].z, r9.z
                mov x0[4].w, r4.w
                mov x0[5].w, r7.w
                mov x0[6].w, r8.w
                mov x0[7].w, r9.w
                mov r4.x, x0[4].x
                mov r4.y, x0[5].x
                mov r4.z, x0[6].x
                mov r4.w, x0[7].x
                mov r7.x, x0[4].y
                mov r7.y, x0[5].y
                mov r7.z, x0[6].y
                mov r7.w, x0[7].y
                mov r8.x, x0[4].z
                mov r8.y, x0[5].z
                mov r8.z, x0[6].z
                mov r8.w, x0[7].z
                mov r9.x, x0[4].w
                mov r9.y, x0[5].w
                mov r9.z, x0[6].w
                mov r9.w, x0[7].w
                dp4 r1.w, r4.xyzw, cb0[36].xyzw
                dp4 r2.z, r4.xyzw, cb0[37].xyzw
                dp4 r2.w, r4.xyzw, cb0[38].xyzw
                dp4 r3.w, r4.xyzw, cb0[39].xyzw
                dp4 r4.x, r7.xyzw, cb0[36].xyzw
                dp4 r4.y, r7.xyzw, cb0[37].xyzw
                dp4 r4.z, r7.xyzw, cb0[38].xyzw
                dp4 r4.w, r7.xyzw, cb0[39].xyzw
                dp4 r7.x, r8.xyzw, cb0[36].xyzw
                dp4 r7.y, r8.xyzw, cb0[37].xyzw
                dp4 r7.z, r8.xyzw, cb0[38].xyzw
                dp4 r7.w, r8.xyzw, cb0[39].xyzw
                dp4 r8.x, r9.xyzw, cb0[36].xyzw
                dp4 r8.y, r9.xyzw, cb0[37].xyzw
                dp4 r8.z, r9.xyzw, cb0[38].xyzw
                dp4 r8.w, r9.xyzw, cb0[39].xyzw
                mov x1[4].x, r1.w
                mov x1[5].x, r2.z
                mov x1[6].x, r2.w
                mov x1[7].x, r3.w
                mov x1[4].y, r4.x
                mov x1[5].y, r4.y
                mov x1[6].y, r4.z
                mov x1[7].y, r4.w
                mov x1[4].z, r7.x
                mov x1[5].z, r7.y
                mov x1[6].z, r7.z
                mov x1[7].z, r7.w
                mov x1[4].w, r8.x
                mov x1[5].w, r8.y
                mov x1[6].w, r8.z
                mov x1[7].w, r8.w
                mul r4.xyzw, cb0[20].xyzw, cb0[32].xxxx
                mul r7.xyzw, cb0[21].xyzw, cb0[32].yyyy
                add r4.xyzw, r4.xyzw, r7.xyzw
                mul r7.xyzw, cb0[22].xyzw, cb0[32].zzzz
                add r4.xyzw, r4.xyzw, r7.xyzw
                mul r7.xyzw, cb0[23].xyzw, cb0[32].wwww
                add r4.xyzw, r4.xyzw, r7.xyzw
                mul r7.xyzw, cb0[20].xyzw, cb0[33].xxxx
                mul r8.xyzw, cb0[21].xyzw, cb0[33].yyyy
                add r7.xyzw, r7.xyzw, r8.xyzw
                mul r8.xyzw, cb0[22].xyzw, cb0[33].zzzz
                add r7.xyzw, r7.xyzw, r8.xyzw
                mul r8.xyzw, cb0[23].xyzw, cb0[33].wwww
                add r7.xyzw, r7.xyzw, r8.xyzw
                mul r8.xyzw, cb0[20].xyzw, cb0[34].xxxx
                mul r9.xyzw, cb0[21].xyzw, cb0[34].yyyy
                add r8.xyzw, r8.xyzw, r9.xyzw
                mul r9.xyzw, cb0[22].xyzw, cb0[34].zzzz
                add r8.xyzw, r8.xyzw, r9.xyzw
                mul r9.xyzw, cb0[23].xyzw, cb0[34].wwww
                add r8.xyzw, r8.xyzw, r9.xyzw
                mul r9.xyzw, cb0[20].xyzw, cb0[35].xxxx
                mul r10.xyzw, cb0[21].xyzw, cb0[35].yyyy
                add r9.xyzw, r9.xyzw, r10.xyzw
                mul r10.xyzw, cb0[22].xyzw, cb0[35].zzzz
                add r9.xyzw, r9.xyzw, r10.xyzw
                mul r10.xyzw, cb0[23].xyzw, cb0[35].wwww
                add r9.xyzw, r9.xyzw, r10.xyzw
                mov x0[8].x, r4.x
                mov x0[9].x, r7.x
                mov x0[10].x, r8.x
                mov x0[11].x, r9.x
                mov x0[8].y, r4.y
                mov x0[9].y, r7.y
                mov x0[10].y, r8.y
                mov x0[11].y, r9.y
                mov x0[8].z, r4.z
                mov x0[9].z, r7.z
                mov x0[10].z, r8.z
                mov x0[11].z, r9.z
                mov x0[8].w, r4.w
                mov x0[9].w, r7.w
                mov x0[10].w, r8.w
                mov x0[11].w, r9.w
                mov r4.x, x0[8].x
                mov r4.y, x0[9].x
                mov r4.z, x0[10].x
                mov r4.w, x0[11].x
                mov r7.x, x0[8].y
                mov r7.y, x0[9].y
                mov r7.z, x0[10].y
                mov r7.w, x0[11].y
                mov r8.x, x0[8].z
                mov r8.y, x0[9].z
                mov r8.z, x0[10].z
                mov r8.w, x0[11].z
                mov r9.x, x0[8].w
                mov r9.y, x0[9].w
                mov r9.z, x0[10].w
                mov r9.w, x0[11].w
                dp4 r1.w, r4.xyzw, cb0[36].xyzw
                dp4 r2.z, r4.xyzw, cb0[37].xyzw
                dp4 r2.w, r4.xyzw, cb0[38].xyzw
                dp4 r3.w, r4.xyzw, cb0[39].xyzw
                dp4 r4.x, r7.xyzw, cb0[36].xyzw
                dp4 r4.y, r7.xyzw, cb0[37].xyzw
                dp4 r4.z, r7.xyzw, cb0[38].xyzw
                dp4 r4.w, r7.xyzw, cb0[39].xyzw
                dp4 r7.x, r8.xyzw, cb0[36].xyzw
                dp4 r7.y, r8.xyzw, cb0[37].xyzw
                dp4 r7.z, r8.xyzw, cb0[38].xyzw
                dp4 r7.w, r8.xyzw, cb0[39].xyzw
                dp4 r8.x, r9.xyzw, cb0[36].xyzw
                dp4 r8.y, r9.xyzw, cb0[37].xyzw
                dp4 r8.z, r9.xyzw, cb0[38].xyzw
                dp4 r8.w, r9.xyzw, cb0[39].xyzw
                mov x1[8].x, r1.w
                mov x1[9].x, r2.z
                mov x1[10].x, r2.w
                mov x1[11].x, r3.w
                mov x1[8].y, r4.x
                mov x1[9].y, r4.y
                mov x1[10].y, r4.z
                mov x1[11].y, r4.w
                mov x1[8].z, r7.x
                mov x1[9].z, r7.y
                mov x1[10].z, r7.z
                mov x1[11].z, r7.w
                mov x1[8].w, r8.x
                mov x1[9].w, r8.y
                mov x1[10].w, r8.z
                mov x1[11].w, r8.w
                mov r4.x, x1[0].x
                mov r7.x, x1[1].x
                mov r8.x, x1[2].x
                mov r9.x, x1[3].x
                mov r4.y, x1[0].y
                mov r7.y, x1[1].y
                mov r8.y, x1[2].y
                mov r9.y, x1[3].y
                mov r4.z, x1[0].z
                mov r7.z, x1[1].z
                mov r8.z, x1[2].z
                mov r9.z, x1[3].z
                mov r4.w, x1[0].w
                mov r7.w, x1[1].w
                mov r8.w, x1[2].w
                mov r9.w, x1[3].w
                dp4 r4.x, r5.xyzw, r4.xyzw  // r4.x <- output.TexShadow0.x
                dp4 r4.y, r5.xyzw, r7.xyzw  // r4.y <- output.TexShadow0.y
                dp4 r4.z, r5.xyzw, r8.xyzw  // r4.z <- output.TexShadow0.z
                dp4 r4.w, r5.xyzw, r9.xyzw  // r4.w <- output.TexShadow0.w
                mov r7.x, x1[4].x
                mov r8.x, x1[5].x
                mov r9.x, x1[6].x
                mov r10.x, x1[7].x
                mov r7.y, x1[4].y
                mov r8.y, x1[5].y
                mov r9.y, x1[6].y
                mov r10.y, x1[7].y
                mov r7.z, x1[4].z
                mov r8.z, x1[5].z
                mov r9.z, x1[6].z
                mov r10.z, x1[7].z
                mov r7.w, x1[4].w
                mov r8.w, x1[5].w
                mov r9.w, x1[6].w
                mov r10.w, x1[7].w
                dp4 r7.x, r5.xyzw, r7.xyzw  // r7.x <- output.TexShadow1.x
                dp4 r7.y, r5.xyzw, r8.xyzw  // r7.y <- output.TexShadow1.y
                dp4 r7.z, r5.xyzw, r9.xyzw  // r7.z <- output.TexShadow1.z
                dp4 r7.w, r5.xyzw, r10.xyzw  // r7.w <- output.TexShadow1.w
                mov r8.x, x1[8].x
                mov r9.x, x1[9].x
                mov r10.x, x1[10].x
                mov r11.x, x1[11].x
                mov r8.y, x1[8].y
                mov r9.y, x1[9].y
                mov r10.y, x1[10].y
                mov r11.y, x1[11].y
                mov r8.z, x1[8].z
                mov r9.z, x1[9].z
                mov r10.z, x1[10].z
                mov r11.z, x1[11].z
                mov r8.w, x1[8].w
                mov r9.w, x1[9].w
                mov r10.w, x1[10].w
                mov r11.w, x1[11].w
                dp4 r8.x, r5.xyzw, r8.xyzw  // r8.x <- output.TexShadow2.x
                dp4 r8.y, r5.xyzw, r9.xyzw  // r8.y <- output.TexShadow2.y
                dp4 r8.z, r5.xyzw, r10.xyzw  // r8.z <- output.TexShadow2.z
                dp4 r8.w, r5.xyzw, r11.xyzw  // r8.w <- output.TexShadow2.w
                
                #line 90
                mov r9.x, x0[2].x
                mov r10.x, x0[3].x
                mov r9.y, x0[2].y
                mov r10.y, x0[3].y
                mov r9.z, x0[2].z
                mov r10.z, x0[3].z
                mov r9.w, x0[2].w
                mov r10.w, x0[3].w
                dp4 r9.x, r5.xyzw, r9.xyzw  // r9.x <- output.Depth0.x
                dp4 r9.y, r5.xyzw, r10.xyzw  // r9.y <- output.Depth0.y
                mov r10.x, x0[6].x
                mov r11.x, x0[7].x
                mov r10.y, x0[6].y
                mov r11.y, x0[7].y
                mov r10.z, x0[6].z
                mov r11.z, x0[7].z
                mov r10.w, x0[6].w
                mov r11.w, x0[7].w
                dp4 r2.z, r5.xyzw, r10.xyzw  // r2.z <- output.Depth0.z
                dp4 r2.w, r5.xyzw, r11.xyzw  // r2.w <- output.Depth0.w
                mov r10.x, x0[10].x
                mov r11.x, x0[11].x
                mov r10.y, x0[10].y
                mov r11.y, x0[11].y
                mov r10.z, x0[10].z
                mov r11.z, x0[11].z
                mov r10.w, x0[10].w
                mov r11.w, x0[11].w
                dp4 r9.z, r5.xyzw, r10.xyzw  // r9.z <- output.Depth1.x
                dp4 r9.w, r5.xyzw, r11.xyzw  // r9.w <- output.Depth1.y
                dp4 r1.w, r5.xyzw, cb4[0].xyzw  // r1.w <- output.clip
                mov o0.xyzw, r6.xyzw
                mov o2.xyzw, r0.xyzw
                mov o3.xy, r2.xyxx
                mov o3.zw, r9.zzzw
                mov o4.xyzw, r4.xyzw
                mov o5.xyzw, r7.xyzw
                mov o6.xyzw, r8.xyzw
                mov o7.xyzw, r6.xyzw
                mov o9.xy, r9.xyxx
                mov o9.zw, r2.zzzw
                mov o1.xyz, r1.xyzx
                mov o8.xyz, r3.xyzx
                mov o10.x, r1.w
                ret 
                // Approximately 413 instruction slots used
                            
            };
            GeometryShader = NULL;
            HullShader = NULL;
            DomainShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbLight
                // {
                //
                //   float4 gLight_Ambient;             // Offset:    0 Size:    16
                //   float4 gLight_Diffuse;             // Offset:   16 Size:    16
                //   float4 gLight_Specular;            // Offset:   32 Size:    16
                //   float3 gLight_Direction;           // Offset:   48 Size:    12
                //   float3 gLight_PosW;                // Offset:   64 Size:    12 [unused]
                //
                // }
                //
                // cbuffer cbMaetrial
                // {
                //
                //   float4 gMtrl_Ambient;              // Offset:    0 Size:    16
                //   float4 gMtrl_Diffuse;              // Offset:   16 Size:    16
                //   float4 gMtrl_Specular;             // Offset:   32 Size:    16
                //   float4 gMtrl_Emissive;             // Offset:   48 Size:    16 [unused]
                //   float gMtrl_Pow;                   // Offset:   64 Size:     4
                //
                // }
                //
                // cbuffer cbSkinning
                // {
                //
                //   float4x4 gPalette[64];             // Offset:    0 Size:  4096 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samLinear                         sampler      NA          NA    0        1
                // samShadow                       sampler_c      NA          NA    1        1
                // txDiffuse                         texture  float4          2d    0        1
                // txShadow0                         texture  float4          2d    4        1
                // txShadow1                         texture  float4          2d    5        1
                // txShadow2                         texture  float4          2d    6        1
                // cbLight                           cbuffer      NA          NA    1        1
                // cbMaetrial                        cbuffer      NA          NA    2        1
                // cbSkinning                        cbuffer      NA          NA    5        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // COLOR                    0   xyzw        2     NONE   float       
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 7     zw        3     NONE   float     zw
                // TEXCOORD                 1   xyzw        4     NONE   float   xy  
                // TEXCOORD                 2   xyzw        5     NONE   float   xy  
                // TEXCOORD                 3   xyzw        6     NONE   float   xy  
                // TEXCOORD                 4   xyzw        7     NONE   float       
                // TEXCOORD                 5   xyz         8     NONE   float   xyz 
                // TEXCOORD                 6   xyzw        9     NONE   float   xyzw
                // SV_ClipDistance          0   x          10  CLIPDST   float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb1[4], immediateIndexed
                dcl_constantbuffer cb2[5], immediateIndexed
                dcl_constantbuffer cb5[1], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_sampler s1, mode_comparison
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t4
                dcl_resource_texture2d (float,float,float,float) t5
                dcl_resource_texture2d (float,float,float,float) t6
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v3.xy
                dcl_input_ps linear v3.zw
                dcl_input_ps linear v4.xy
                dcl_input_ps linear v5.xy
                dcl_input_ps linear v6.xy
                dcl_input_ps linear v8.xyz
                dcl_input_ps linear v9.xyzw
                dcl_output o0.xyzw
                dcl_temps 5
                dcl_indexableTemp x0[27], 4
                //
                // Initial variable locations:
                //   v0.x <- In.Pos.x; v0.y <- In.Pos.y; v0.z <- In.Pos.z; v0.w <- In.Pos.w; 
                //   v1.x <- In.Normal.x; v1.y <- In.Normal.y; v1.z <- In.Normal.z; 
                //   v2.x <- In.Color.x; v2.y <- In.Color.y; v2.z <- In.Color.z; v2.w <- In.Color.w; 
                //   v3.x <- In.Tex.x; v3.y <- In.Tex.y; 
                //   v4.x <- In.TexShadow0.x; v4.y <- In.TexShadow0.y; v4.z <- In.TexShadow0.z; v4.w <- In.TexShadow0.w; 
                //   v5.x <- In.TexShadow1.x; v5.y <- In.TexShadow1.y; v5.z <- In.TexShadow1.z; v5.w <- In.TexShadow1.w; 
                //   v6.x <- In.TexShadow2.x; v6.y <- In.TexShadow2.y; v6.z <- In.TexShadow2.z; v6.w <- In.TexShadow2.w; 
                //   v7.x <- In.PosH.x; v7.y <- In.PosH.y; v7.z <- In.PosH.z; v7.w <- In.PosH.w; 
                //   v8.x <- In.toEye.x; v8.y <- In.toEye.y; v8.z <- In.toEye.z; 
                //   v9.x <- In.Depth0.x; v9.y <- In.Depth0.y; v9.z <- In.Depth0.z; v9.w <- In.Depth0.w; 
                //   v3.z <- In.Depth1.x; v3.w <- In.Depth1.y; 
                //   v10.x <- In.clip; 
                //   o0.x <- <PS_ShadowMap return value>.x; o0.y <- <PS_ShadowMap return value>.y; o0.z <- <PS_ShadowMap return value>.z; o0.w <- <PS_ShadowMap return value>.w
                //
                #line 105 "D:\Project\Shader-Practice\Src\ForwardLight_AmbientLight\ForwardLight_AmbientLight\hlsl.fx"
                nop 
                mov r0.xyzw, v9.xyzw
                mov r1.xy, v3.zwzz
                mov r1.zw, v4.xxxy
                mov r2.xy, v5.xyxx
                mov r2.zw, v6.xxxy
                
                #line 286 "D:\Project\Shader-Practice\Src\ForwardLight_AmbientLight\ForwardLight_AmbientLight\common.fx"
                mov r3.y, l(0.000977)  // r3.y <- dx
                div r0.x, r0.x, r0.y
                min r0.x, r0.x, l(1.000000)  // r0.x <- depth0
                div r0.y, r0.z, r0.w
                min r0.y, r0.y, l(1.000000)  // r0.y <- depth1
                div r0.z, r1.x, r1.y
                min r0.z, r0.z, l(1.000000)  // r0.z <- depth2
                
                #line 295
                mov x0[0].xy, r1.zwzz
                mov r1.x, -r3.y
                mov r1.y, l(0)
                add r1.xy, r1.xyxx, r1.zwzz
                mov x0[1].xy, r1.xyxx
                mov r3.z, l(0)
                add r1.xy, r1.zwzz, r3.yzyy
                mov x0[2].xy, r1.xyxx
                mov r1.y, -r3.y
                mov r1.x, l(0)
                add r1.xy, r1.xyxx, r1.zwzz
                mov x0[3].xy, r1.xyxx
                add r1.xy, r1.zwzz, r3.zyzz
                mov x0[6].xy, r1.xyxx
                mov r1.x, -r3.y
                mov r1.y, -r3.y
                add r1.xy, r1.xyxx, r1.zwzz
                mov x0[4].xy, r1.xyxx
                mov r3.w, -r3.y
                add r1.xy, r1.zwzz, r3.ywyy
                mov x0[5].xy, r1.xyxx
                mov r3.x, -r3.y
                add r1.xy, r1.zwzz, r3.xyxx
                mov x0[7].xy, r1.xyxx
                add r1.xy, r1.zwzz, r3.yyyy
                mov x0[8].xy, r1.xyxx
                mov x0[9].xy, r2.xyxx
                
                #line 306
                mov r1.x, -r3.y
                mov r1.y, l(0)
                add r1.xy, r1.xyxx, r2.xyxx
                mov x0[10].xy, r1.xyxx
                add r1.xy, r2.xyxx, r3.yzyy
                mov x0[11].xy, r1.xyxx
                mov r1.y, -r3.y
                mov r1.x, l(0)
                add r1.xy, r1.xyxx, r2.xyxx
                mov x0[12].xy, r1.xyxx
                add r1.xy, r2.xyxx, r3.zyzz
                mov x0[15].xy, r1.xyxx
                mov r1.x, -r3.y
                mov r1.y, -r3.y
                add r1.xy, r1.xyxx, r2.xyxx
                mov x0[13].xy, r1.xyxx
                mov r1.z, -r3.y
                mov r1.y, r3.y
                add r3.xw, r1.yyyz, r2.xxxy
                mov x0[14].xy, r3.xwxx
                mov r1.x, -r3.y
                add r3.xw, r1.xxxy, r2.xxxy
                mov x0[16].xy, r3.xwxx
                add r2.xy, r2.xyxx, r3.yyyy
                mov x0[17].xy, r2.xyxx
                mov x0[18].xy, r2.zwzz
                mov r2.x, -r3.y
                mov r2.y, l(0)
                add r2.xy, r2.xyxx, r2.zwzz
                mov x0[19].xy, r2.xyxx
                
                #line 317
                add r2.xy, r2.zwzz, r3.yzyy
                mov x0[20].xy, r2.xyxx
                mov r2.y, -r3.y
                mov r2.x, l(0)
                add r2.xy, r2.xyxx, r2.zwzz
                mov x0[21].xy, r2.xyxx
                add r2.xy, r2.zwzz, r3.zyzz
                mov x0[24].xy, r2.xyxx
                mov r2.x, -r3.y
                mov r2.y, -r3.y
                add r2.xy, r2.xyxx, r2.zwzz
                mov x0[22].xy, r2.xyxx
                mov r1.w, -r3.y
                add r1.zw, r1.yyyw, r2.zzzw
                mov x0[23].xy, r1.zwzz
                mov r1.x, -r3.y
                add r1.xy, r1.xyxx, r2.zwzz
                mov x0[25].xy, r1.xyxx
                add r1.xy, r2.zwzz, r3.yyyy
                mov x0[26].xy, r1.xyxx
                mov r0.w, l(-0.001000)
                add r0.x, r0.w, r0.x  // r0.x <- S0
                mov r0.w, l(-0.001000)
                add r0.y, r0.w, r0.y  // r0.y <- S1
                mov r0.w, l(-0.001000)
                add r0.z, r0.w, r0.z  // r0.z <- S2
                
                #line 329
                mov r0.w, l(0)  // r0.w <- fShadowTerm
                mov r1.x, l(0)  // r1.x <- i
                mov r1.y, r0.w  // r1.y <- fShadowTerm
                mov r1.z, r1.x  // r1.z <- i
                loop 
                  ilt r1.w, r1.z, l(9)
                  breakc_z r1.w
                  mov r2.xy, x0[r1.z + 0].xyxx
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r1.w, r2.xyxx, t4.xxxx, s1, r0.x  // r1.w <- D0
                  mov r2.xy, x0[r1.z + 9].xyxx
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r2.x, r2.xyxx, t5.xxxx, s1, r0.y  // r2.x <- D1
                  mov r2.yz, x0[r1.z + 18].xxyx
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r2.y, r2.yzyy, t6.xxxx, s1, r0.z  // r2.y <- D2
                  itof r2.z, l(1)
                  add r1.w, r1.w, r2.x
                  add r1.w, r2.y, r1.w
                  max r1.w, r1.w, l(0.000000)
                  min r1.w, r1.w, l(1.000000)
                  mov r1.w, -r1.w
                  add r1.w, r1.w, r2.z
                  add r1.y, r1.w, r1.y
                  iadd r1.z, r1.z, l(1)
                endloop 
                div r0.x, r1.y, l(9.000000)  // r0.x <- fShadowTerm
                
                #line 340
                mov r0.x, r0.x  // r0.x <- <GetShadowPCF return value>
                
                #line 105 "D:\Project\Shader-Practice\Src\ForwardLight_AmbientLight\ForwardLight_AmbientLight\hlsl.fx"
                mov r0.x, r0.x  // r0.x <- fShadowTerm
                nop 
                mul r0.x, r0.x, l(0.900000)
                
                #line 384 "D:\Project\Shader-Practice\Src\ForwardLight_AmbientLight\ForwardLight_AmbientLight\common.fx"
                mov r0.yzw, -cb1[3].xxyz  // r0.y <- L.x; r0.z <- L.y; r0.w <- L.z
                dp3 r1.x, v8.xyzx, v8.xyzx
                rsq r1.x, r1.x
                mul r1.xyz, r1.xxxx, v8.xyzx
                add r1.xyz, r0.yzwy, r1.xyzx
                dp3 r1.w, r1.xyzx, r1.xyzx
                rsq r1.w, r1.w
                mul r1.xyz, r1.wwww, r1.xyzx  // r1.x <- H.x; r1.y <- H.y; r1.z <- H.z
                dp3 r1.w, v1.xyzx, v1.xyzx
                rsq r1.w, r1.w
                mul r2.xyz, r1.wwww, v1.xyzx  // r2.x <- N.x; r2.y <- N.y; r2.z <- N.z
                itof r1.w, l(0)
                dp3 r0.y, r2.xyzx, r0.yzwy
                max r0.y, r0.y, r1.w  // r0.y <- lightV
                mul r3.xyz, cb1[0].xyzx, cb2[0].xyzx
                mul r4.xyz, cb1[1].xyzx, cb2[1].xyzx
                mul r4.xyz, r4.xyzx, l(0.100000, 0.100000, 0.100000, 0.000000)
                add r3.xyz, r3.xyzx, r4.xyzx
                mul r4.xyz, cb1[1].xyzx, cb2[1].xyzx
                mul r4.xyz, r0.yyyy, r4.xyzx
                mul r4.xyz, r4.xyzx, l(0.100000, 0.100000, 0.100000, 0.000000)
                add r3.xyz, r3.xyzx, r4.xyzx
                mul r4.xyz, cb1[1].xyzx, cb2[1].xyzx
                mul r0.yzw, r0.yyyy, r4.xxyz
                mul r0.xyz, r0.xxxx, r0.yzwy
                mul r0.xyz, r0.xyzx, l(0.900000, 0.900000, 0.900000, 0.000000)
                add r0.xyz, r0.xyzx, r3.xyzx
                mul r3.xyz, cb1[2].xyzx, cb2[2].xyzx
                itof r0.w, l(0)
                dp3 r1.x, r2.xyzx, r1.xyzx
                max r0.w, r0.w, r1.x
                log r0.w, r0.w
                mul r0.w, r0.w, cb2[4].x
                exp r0.w, r0.w
                mul r1.xyz, r0.wwww, r3.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- color.x; r0.y <- color.y; r0.z <- color.z
                
                #line 395
                mov r0.xyz, r0.xyzx  // r0.x <- <GetLightingColor return value>.x; r0.y <- <GetLightingColor return value>.y; r0.z <- <GetLightingColor return value>.z
                
                #line 107 "D:\Project\Shader-Practice\Src\ForwardLight_AmbientLight\ForwardLight_AmbientLight\hlsl.fx"
                mov r0.xyz, r0.xyzx  // r0.x <- color.x; r0.y <- color.y; r0.z <- color.z
                sample_indexable(texture2d)(float,float,float,float) r1.xyzw, v3.xyxx, t0.xyzw, s0  // r1.x <- texColor.x; r1.y <- texColor.y; r1.z <- texColor.z; r1.w <- texColor.w
                mul r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- Out.x; r0.y <- Out.y; r0.z <- Out.z
                mul o0.w, r1.w, cb2[1].w
                mov o0.xyz, r0.xyzx
                ret 
                // Approximately 167 instruction slots used
                            
            };
        }

    }

    technique11 BuildShadowMap
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gView;                    // Offset:   64 Size:    64
                //   float4x4 gProjection;              // Offset:  128 Size:    64
                //   float4x4 gLightView[3];            // Offset:  192 Size:   192 [unused]
                //   float4x4 gLightProj[3];            // Offset:  384 Size:   192 [unused]
                //   float4x4 gLightTT;                 // Offset:  576 Size:    64 [unused]
                //   float3 gEyePosW;                   // Offset:  640 Size:    12 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyzw        0     NONE   float   xyzw
                // NORMAL                   0   xyz         1     NONE   float       
                // TEXCOORD                 0   xy          2     NONE   float       
                // SV_InstanceID            0   x           3   INSTID    uint       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[12], immediateIndexed
                dcl_input v0.xyzw
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xy
                dcl_temps 4
                //
                // Initial variable locations:
                //   v0.x <- Pos.x; v0.y <- Pos.y; v0.z <- Pos.z; v0.w <- Pos.w; 
                //   v1.x <- Normal.x; v1.y <- Normal.y; v1.z <- Normal.z; 
                //   v2.x <- Tex.x; v2.y <- Tex.y; 
                //   v3.x <- instID; 
                //   o1.x <- <VS_BuildShadowMap return value>.Depth.x; o1.y <- <VS_BuildShadowMap return value>.Depth.y; 
                //   o0.x <- <VS_BuildShadowMap return value>.Pos.x; o0.y <- <VS_BuildShadowMap return value>.Pos.y; o0.z <- <VS_BuildShadowMap return value>.Pos.z; o0.w <- <VS_BuildShadowMap return value>.Pos.w
                //
                #line 125 "D:\Project\Shader-Practice\Src\ForwardLight_AmbientLight\ForwardLight_AmbientLight\hlsl.fx"
                mov r0.xyzw, cb0[0].xyzw  // r0.x <- mWorld._m00; r0.y <- mWorld._m10; r0.z <- mWorld._m20; r0.w <- mWorld._m30
                mov r1.xyzw, cb0[1].xyzw  // r1.x <- mWorld._m01; r1.y <- mWorld._m11; r1.z <- mWorld._m21; r1.w <- mWorld._m31
                mov r2.xyzw, cb0[2].xyzw  // r2.x <- mWorld._m02; r2.y <- mWorld._m12; r2.z <- mWorld._m22; r2.w <- mWorld._m32
                mov r3.xyzw, cb0[3].xyzw  // r3.x <- mWorld._m03; r3.y <- mWorld._m13; r3.z <- mWorld._m23; r3.w <- mWorld._m33
                dp4 r0.x, v0.xyzw, r0.xyzw  // r0.x <- output.Pos.x
                dp4 r0.y, v0.xyzw, r1.xyzw  // r0.y <- output.Pos.y
                dp4 r0.z, v0.xyzw, r2.xyzw  // r0.z <- output.Pos.z
                dp4 r0.w, v0.xyzw, r3.xyzw  // r0.w <- output.Pos.w
                dp4 r1.x, r0.xyzw, cb0[4].xyzw  // r1.x <- output.Pos.x
                dp4 r1.y, r0.xyzw, cb0[5].xyzw  // r1.y <- output.Pos.y
                dp4 r1.z, r0.xyzw, cb0[6].xyzw  // r1.z <- output.Pos.z
                dp4 r1.w, r0.xyzw, cb0[7].xyzw  // r1.w <- output.Pos.w
                dp4 r0.z, r1.xyzw, cb0[8].xyzw  // r0.z <- output.Pos.x
                dp4 r0.w, r1.xyzw, cb0[9].xyzw  // r0.w <- output.Pos.y
                dp4 r0.x, r1.xyzw, cb0[10].xyzw  // r0.x <- output.Pos.z
                dp4 r0.y, r1.xyzw, cb0[11].xyzw  // r0.y <- output.Pos.w
                mov r0.xy, r0.xyxx  // r0.x <- output.Depth.x; r0.y <- output.Depth.y
                mov o0.xyzw, r0.zwxy
                mov o1.xy, r0.xyxx
                ret 
                // Approximately 20 instruction slots used
                            
            };
            GeometryShader = NULL;
            HullShader = NULL;
            DomainShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbMaetrial
                // {
                //
                //   float4 gMtrl_Ambient;              // Offset:    0 Size:    16 [unused]
                //   float4 gMtrl_Diffuse;              // Offset:   16 Size:    16
                //   float4 gMtrl_Specular;             // Offset:   32 Size:    16 [unused]
                //   float4 gMtrl_Emissive;             // Offset:   48 Size:    16 [unused]
                //   float gMtrl_Pow;                   // Offset:   64 Size:     4 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbMaetrial                        cbuffer      NA          NA    2        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // TEXCOORD                 0   xy          1     NONE   float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb2[2], immediateIndexed
                dcl_output o0.xyzw
                dcl_temps 1
                //
                // Initial variable locations:
                //   v0.x <- In.Pos.x; v0.y <- In.Pos.y; v0.z <- In.Pos.z; v0.w <- In.Pos.w; 
                //   v1.x <- In.Depth.x; v1.y <- In.Depth.y; 
                //   o0.x <- <PS_BuildShadowMap return value>.x; o0.y <- <PS_BuildShadowMap return value>.y; o0.z <- <PS_BuildShadowMap return value>.z; o0.w <- <PS_BuildShadowMap return value>.w
                //
                #line 138 "D:\Project\Shader-Practice\Src\ForwardLight_AmbientLight\ForwardLight_AmbientLight\hlsl.fx"
                mov r0.x, l(-0.500000)
                add r0.x, r0.x, cb2[1].w
                lt r0.x, r0.x, l(0.000000)
                and r0.x, r0.x, l(-1)
                discard_nz r0.x
                itof o0.xyzw, l(1, 1, 1, 1)
                ret 
                // Approximately 7 instruction slots used
                            
            };
        }

    }

    technique11 Unlit_Instancing
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gView;                    // Offset:   64 Size:    64
                //   float4x4 gProjection;              // Offset:  128 Size:    64
                //   float4x4 gLightView[3];            // Offset:  192 Size:   192 [unused]
                //   float4x4 gLightProj[3];            // Offset:  384 Size:   192 [unused]
                //   float4x4 gLightTT;                 // Offset:  576 Size:    64 [unused]
                //   float3 gEyePosW;                   // Offset:  640 Size:    12
                //
                // }
                //
                // cbuffer cbPerFrameInstancing
                // {
                //
                //   float4x4 gWorldInst[256];          // Offset:    0 Size: 16384
                //
                // }
                //
                // cbuffer cbClipPlane
                // {
                //
                //   float4 gClipPlane;                 // Offset:    0 Size:    16
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerFrameInstancing              cbuffer      NA          NA    3        1
                // cbClipPlane                       cbuffer      NA          NA    4        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyzw        0     NONE   float   xyzw
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // SV_InstanceID            0   x           3   INSTID    uint   x   
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // TEXCOORD                 0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 1   xy          2     NONE   float   xy  
                // TEXCOORD                 2   xyzw        3     NONE   float   xyzw
                // TEXCOORD                 3   xyz         4     NONE   float   xyz 
                // SV_ClipDistance          0   x           5  CLIPDST   float   x   
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[41], immediateIndexed
                dcl_constantbuffer cb3[1024], dynamicIndexed
                dcl_constantbuffer cb4[1], immediateIndexed
                dcl_input v0.xyzw
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input_sgv v3.x, instance_id
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xy
                dcl_output o3.xyzw
                dcl_output o4.xyz
                dcl_output_siv o5.x, clip_distance
                dcl_temps 6
                //
                // Initial variable locations:
                //   v0.x <- Pos.x; v0.y <- Pos.y; v0.z <- Pos.z; v0.w <- Pos.w; 
                //   v1.x <- Normal.x; v1.y <- Normal.y; v1.z <- Normal.z; 
                //   v2.x <- Tex.x; v2.y <- Tex.y; 
                //   v3.x <- instID; 
                //   o5.x <- <VS return value>.clip; 
                //   o4.x <- <VS return value>.toEye.x; o4.y <- <VS return value>.toEye.y; o4.z <- <VS return value>.toEye.z; 
                //   o3.x <- <VS return value>.PosH.x; o3.y <- <VS return value>.PosH.y; o3.z <- <VS return value>.PosH.z; o3.w <- <VS return value>.PosH.w; 
                //   o2.x <- <VS return value>.Tex.x; o2.y <- <VS return value>.Tex.y; 
                //   o1.x <- <VS return value>.Normal.x; o1.y <- <VS return value>.Normal.y; o1.z <- <VS return value>.Normal.z; 
                //   o0.x <- <VS return value>.Pos.x; o0.y <- <VS return value>.Pos.y; o0.z <- <VS return value>.Pos.z; o0.w <- <VS return value>.Pos.w
                //
                #line 17 "D:\Project\Shader-Practice\Src\ForwardLight_AmbientLight\ForwardLight_AmbientLight\hlsl.fx"
                imul null, r0.x, v3.x, l(4)
                mov r1.xyzw, cb3[r0.x + 0].xyzw  // r1.x <- mWorld._m00; r1.y <- mWorld._m10; r1.z <- mWorld._m20; r1.w <- mWorld._m30
                mov r2.xyzw, cb3[r0.x + 1].xyzw  // r2.x <- mWorld._m01; r2.y <- mWorld._m11; r2.z <- mWorld._m21; r2.w <- mWorld._m31
                mov r3.xyzw, cb3[r0.x + 2].xyzw  // r3.x <- mWorld._m02; r3.y <- mWorld._m12; r3.z <- mWorld._m22; r3.w <- mWorld._m32
                mov r0.xyzw, cb3[r0.x + 3].xyzw  // r0.x <- mWorld._m03; r0.y <- mWorld._m13; r0.z <- mWorld._m23; r0.w <- mWorld._m33
                dp4 r4.x, v0.xyzw, r1.xyzw  // r4.x <- PosW.x
                dp4 r4.y, v0.xyzw, r2.xyzw  // r4.y <- PosW.y
                dp4 r4.z, v0.xyzw, r3.xyzw  // r4.z <- PosW.z
                dp4 r4.w, v0.xyzw, r0.xyzw  // r4.w <- PosW.w
                dp4 r0.x, r4.xyzw, cb0[4].xyzw  // r0.x <- output.Pos.x
                dp4 r0.y, r4.xyzw, cb0[5].xyzw  // r0.y <- output.Pos.y
                dp4 r0.z, r4.xyzw, cb0[6].xyzw  // r0.z <- output.Pos.z
                dp4 r0.w, r4.xyzw, cb0[7].xyzw  // r0.w <- output.Pos.w
                dp4 r5.x, r0.xyzw, cb0[8].xyzw  // r5.x <- output.Pos.x
                dp4 r5.y, r0.xyzw, cb0[9].xyzw  // r5.y <- output.Pos.y
                dp4 r5.z, r0.xyzw, cb0[10].xyzw  // r5.z <- output.Pos.z
                dp4 r5.w, r0.xyzw, cb0[11].xyzw  // r5.w <- output.Pos.w
                dp3 r0.x, v1.xyzx, r1.xyzx
                dp3 r0.y, v1.xyzx, r2.xyzx
                dp3 r0.z, v1.xyzx, r3.xyzx
                dp3 r0.w, r0.xyzx, r0.xyzx
                rsq r0.w, r0.w
                mul r0.xyz, r0.wwww, r0.xyzx  // r0.x <- output.Normal.x; r0.y <- output.Normal.y; r0.z <- output.Normal.z
                mov r1.xy, v2.xyxx  // r1.x <- output.Tex.x; r1.y <- output.Tex.y
                mov r5.xyzw, r5.xyzw  // r5.x <- output.PosH.x; r5.y <- output.PosH.y; r5.z <- output.PosH.z; r5.w <- output.PosH.w
                itof r0.w, l(1)
                mov r2.xyzw, -r4.xyzw
                add r3.xyz, r2.xyzx, cb0[40].xyzx
                add r3.w, r0.w, r2.w
                dp4 r0.w, r3.xyzw, r3.xyzw
                rsq r0.w, r0.w
                mul r2.xyz, r0.wwww, r3.xyzx  // r2.x <- output.toEye.x; r2.y <- output.toEye.y; r2.z <- output.toEye.z
                dp4 r0.w, r4.xyzw, cb4[0].xyzw  // r0.w <- output.clip
                
                #line 28
                mov o0.xyzw, r5.xyzw
                mov o3.xyzw, r5.xyzw
                mov o1.xyz, r0.xyzx
                mov o4.xyz, r2.xyzx
                mov o2.xy, r1.xyxx
                mov o5.x, r0.w
                ret 
                // Approximately 40 instruction slots used
                            
            };
            GeometryShader = NULL;
            HullShader = NULL;
            DomainShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbLight
                // {
                //
                //   float4 gLight_Ambient;             // Offset:    0 Size:    16
                //   float4 gLight_Diffuse;             // Offset:   16 Size:    16
                //   float4 gLight_Specular;            // Offset:   32 Size:    16
                //   float3 gLight_Direction;           // Offset:   48 Size:    12
                //   float3 gLight_PosW;                // Offset:   64 Size:    12 [unused]
                //
                // }
                //
                // cbuffer cbMaetrial
                // {
                //
                //   float4 gMtrl_Ambient;              // Offset:    0 Size:    16
                //   float4 gMtrl_Diffuse;              // Offset:   16 Size:    16
                //   float4 gMtrl_Specular;             // Offset:   32 Size:    16
                //   float4 gMtrl_Emissive;             // Offset:   48 Size:    16 [unused]
                //   float gMtrl_Pow;                   // Offset:   64 Size:     4
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samLinear                         sampler      NA          NA    0        1
                // txDiffuse                         texture  float4          2d    0        1
                // cbLight                           cbuffer      NA          NA    1        1
                // cbMaetrial                        cbuffer      NA          NA    2        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // TEXCOORD                 0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 1   xy          2     NONE   float   xy  
                // TEXCOORD                 2   xyzw        3     NONE   float       
                // TEXCOORD                 3   xyz         4     NONE   float   xyz 
                // SV_ClipDistance          0   x           5  CLIPDST   float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb1[4], immediateIndexed
                dcl_constantbuffer cb2[5], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xy
                dcl_input_ps linear v4.xyz
                dcl_output o0.xyzw
                dcl_temps 4
                //
                // Initial variable locations:
                //   v0.x <- In.Pos.x; v0.y <- In.Pos.y; v0.z <- In.Pos.z; v0.w <- In.Pos.w; 
                //   v1.x <- In.Normal.x; v1.y <- In.Normal.y; v1.z <- In.Normal.z; 
                //   v2.x <- In.Tex.x; v2.y <- In.Tex.y; 
                //   v3.x <- In.PosH.x; v3.y <- In.PosH.y; v3.z <- In.PosH.z; v3.w <- In.PosH.w; 
                //   v4.x <- In.toEye.x; v4.y <- In.toEye.y; v4.z <- In.toEye.z; 
                //   v5.x <- In.clip; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 37 "D:\Project\Shader-Practice\Src\ForwardLight_AmbientLight\ForwardLight_AmbientLight\hlsl.fx"
                nop 
                
                #line 384 "D:\Project\Shader-Practice\Src\ForwardLight_AmbientLight\ForwardLight_AmbientLight\common.fx"
                mov r0.xyz, -cb1[3].xyzx  // r0.x <- L.x; r0.y <- L.y; r0.z <- L.z
                dp3 r0.w, v4.xyzx, v4.xyzx
                rsq r0.w, r0.w
                mul r1.xyz, r0.wwww, v4.xyzx
                add r1.xyz, r0.xyzx, r1.xyzx
                dp3 r0.w, r1.xyzx, r1.xyzx
                rsq r0.w, r0.w
                mul r1.xyz, r0.wwww, r1.xyzx  // r1.x <- H.x; r1.y <- H.y; r1.z <- H.z
                dp3 r0.w, v1.xyzx, v1.xyzx
                rsq r0.w, r0.w
                mul r2.xyz, r0.wwww, v1.xyzx  // r2.x <- N.x; r2.y <- N.y; r2.z <- N.z
                itof r0.w, l(0)
                dp3 r0.x, r2.xyzx, r0.xyzx
                max r0.x, r0.x, r0.w  // r0.x <- lightV
                mul r0.yzw, cb1[0].xxyz, cb2[0].xxyz
                mul r3.xyz, cb1[1].xyzx, cb2[1].xyzx
                mul r3.xyz, r3.xyzx, l(0.100000, 0.100000, 0.100000, 0.000000)
                add r0.yzw, r0.yyzw, r3.xxyz
                mul r3.xyz, cb1[1].xyzx, cb2[1].xyzx
                mul r3.xyz, r0.xxxx, r3.xyzx
                mul r3.xyz, r3.xyzx, l(0.100000, 0.100000, 0.100000, 0.000000)
                add r0.yzw, r0.yyzw, r3.xxyz
                mul r3.xyz, cb1[1].xyzx, cb2[1].xyzx
                mul r3.xyz, r0.xxxx, r3.xyzx
                mul r3.xyz, r3.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
                mul r3.xyz, r3.xyzx, l(0.900000, 0.900000, 0.900000, 0.000000)
                add r0.xyz, r0.yzwy, r3.xyzx
                mul r3.xyz, cb1[2].xyzx, cb2[2].xyzx
                itof r0.w, l(0)
                dp3 r1.x, r2.xyzx, r1.xyzx
                max r0.w, r0.w, r1.x
                log r0.w, r0.w
                mul r0.w, r0.w, cb2[4].x
                exp r0.w, r0.w
                mul r1.xyz, r0.wwww, r3.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- color.x; r0.y <- color.y; r0.z <- color.z
                
                #line 395
                mov r0.xyz, r0.xyzx  // r0.x <- <GetLightingColor return value>.x; r0.y <- <GetLightingColor return value>.y; r0.z <- <GetLightingColor return value>.z
                
                #line 37 "D:\Project\Shader-Practice\Src\ForwardLight_AmbientLight\ForwardLight_AmbientLight\hlsl.fx"
                mov r0.xyz, r0.xyzx  // r0.x <- color.x; r0.y <- color.y; r0.z <- color.z
                sample_indexable(texture2d)(float,float,float,float) r1.xyzw, v2.xyxx, t0.xyzw, s0  // r1.x <- texColor.x; r1.y <- texColor.y; r1.z <- texColor.z; r1.w <- texColor.w
                mul r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- Out.x; r0.y <- Out.y; r0.z <- Out.z
                mul o0.w, r1.w, cb2[1].w
                mov o0.xyz, r0.xyzx
                ret 
                // Approximately 44 instruction slots used
                            
            };
        }

    }

    technique11 ShadowMap_Instancing
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gView;                    // Offset:   64 Size:    64
                //   float4x4 gProjection;              // Offset:  128 Size:    64
                //   float4x4 gLightView[3];            // Offset:  192 Size:   192
                //   float4x4 gLightProj[3];            // Offset:  384 Size:   192
                //   float4x4 gLightTT;                 // Offset:  576 Size:    64
                //   float3 gEyePosW;                   // Offset:  640 Size:    12
                //
                // }
                //
                // cbuffer cbPerFrameInstancing
                // {
                //
                //   float4x4 gWorldInst[256];          // Offset:    0 Size: 16384
                //
                // }
                //
                // cbuffer cbClipPlane
                // {
                //
                //   float4 gClipPlane;                 // Offset:    0 Size:    16
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerFrameInstancing              cbuffer      NA          NA    3        1
                // cbClipPlane                       cbuffer      NA          NA    4        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyzw        0     NONE   float   xyzw
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // SV_InstanceID            0   x           3   INSTID    uint   x   
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // COLOR                    0   xyzw        2     NONE   float   xyzw
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 7     zw        3     NONE   float     zw
                // TEXCOORD                 1   xyzw        4     NONE   float   xyzw
                // TEXCOORD                 2   xyzw        5     NONE   float   xyzw
                // TEXCOORD                 3   xyzw        6     NONE   float   xyzw
                // TEXCOORD                 4   xyzw        7     NONE   float   xyzw
                // TEXCOORD                 5   xyz         8     NONE   float   xyz 
                // TEXCOORD                 6   xyzw        9     NONE   float   xyzw
                // SV_ClipDistance          0   x          10  CLIPDST   float   x   
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[41], immediateIndexed
                dcl_constantbuffer cb3[1024], dynamicIndexed
                dcl_constantbuffer cb4[1], immediateIndexed
                dcl_input v0.xyzw
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input_sgv v3.x, instance_id
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyzw
                dcl_output o3.xy
                dcl_output o3.zw
                dcl_output o4.xyzw
                dcl_output o5.xyzw
                dcl_output o6.xyzw
                dcl_output o7.xyzw
                dcl_output o8.xyz
                dcl_output o9.xyzw
                dcl_output_siv o10.x, clip_distance
                dcl_temps 12
                dcl_indexableTemp x0[12], 4
                dcl_indexableTemp x1[12], 4
                //
                // Initial variable locations:
                //   v0.x <- Pos.x; v0.y <- Pos.y; v0.z <- Pos.z; v0.w <- Pos.w; 
                //   v1.x <- Normal.x; v1.y <- Normal.y; v1.z <- Normal.z; 
                //   v2.x <- Tex.x; v2.y <- Tex.y; 
                //   v3.x <- instID; 
                //   o10.x <- <VS_ShadowMap return value>.clip; 
                //   o9.x <- <VS_ShadowMap return value>.Depth0.x; o9.y <- <VS_ShadowMap return value>.Depth0.y; o9.z <- <VS_ShadowMap return value>.Depth0.z; o9.w <- <VS_ShadowMap return value>.Depth0.w; 
                //   o8.x <- <VS_ShadowMap return value>.toEye.x; o8.y <- <VS_ShadowMap return value>.toEye.y; o8.z <- <VS_ShadowMap return value>.toEye.z; 
                //   o7.x <- <VS_ShadowMap return value>.PosH.x; o7.y <- <VS_ShadowMap return value>.PosH.y; o7.z <- <VS_ShadowMap return value>.PosH.z; o7.w <- <VS_ShadowMap return value>.PosH.w; 
                //   o6.x <- <VS_ShadowMap return value>.TexShadow2.x; o6.y <- <VS_ShadowMap return value>.TexShadow2.y; o6.z <- <VS_ShadowMap return value>.TexShadow2.z; o6.w <- <VS_ShadowMap return value>.TexShadow2.w; 
                //   o5.x <- <VS_ShadowMap return value>.TexShadow1.x; o5.y <- <VS_ShadowMap return value>.TexShadow1.y; o5.z <- <VS_ShadowMap return value>.TexShadow1.z; o5.w <- <VS_ShadowMap return value>.TexShadow1.w; 
                //   o4.x <- <VS_ShadowMap return value>.TexShadow0.x; o4.y <- <VS_ShadowMap return value>.TexShadow0.y; o4.z <- <VS_ShadowMap return value>.TexShadow0.z; o4.w <- <VS_ShadowMap return value>.TexShadow0.w; 
                //   o3.x <- <VS_ShadowMap return value>.Tex.x; o3.y <- <VS_ShadowMap return value>.Tex.y; o3.z <- <VS_ShadowMap return value>.Depth1.x; o3.w <- <VS_ShadowMap return value>.Depth1.y; 
                //   o2.x <- <VS_ShadowMap return value>.Color.x; o2.y <- <VS_ShadowMap return value>.Color.y; o2.z <- <VS_ShadowMap return value>.Color.z; o2.w <- <VS_ShadowMap return value>.Color.w; 
                //   o1.x <- <VS_ShadowMap return value>.Normal.x; o1.y <- <VS_ShadowMap return value>.Normal.y; o1.z <- <VS_ShadowMap return value>.Normal.z; 
                //   o0.x <- <VS_ShadowMap return value>.Pos.x; o0.y <- <VS_ShadowMap return value>.Pos.y; o0.z <- <VS_ShadowMap return value>.Pos.z; o0.w <- <VS_ShadowMap return value>.Pos.w; 
                //   x0 <- mLVP; x1 <- mVPT
                //
                #line 65 "D:\Project\Shader-Practice\Src\ForwardLight_AmbientLight\ForwardLight_AmbientLight\hlsl.fx"
                itof r0.xyzw, l(0, 0, 0, 0)  // r0.x <- output.Color.x; r0.y <- output.Color.y; r0.z <- output.Color.z; r0.w <- output.Color.w
                imul null, r1.x, v3.x, l(4)
                mov r2.xyzw, cb3[r1.x + 0].xyzw  // r2.x <- mWorld._m00; r2.y <- mWorld._m10; r2.z <- mWorld._m20; r2.w <- mWorld._m30
                mov r3.xyzw, cb3[r1.x + 1].xyzw  // r3.x <- mWorld._m01; r3.y <- mWorld._m11; r3.z <- mWorld._m21; r3.w <- mWorld._m31
                mov r4.xyzw, cb3[r1.x + 2].xyzw  // r4.x <- mWorld._m02; r4.y <- mWorld._m12; r4.z <- mWorld._m22; r4.w <- mWorld._m32
                mov r1.xyzw, cb3[r1.x + 3].xyzw  // r1.x <- mWorld._m03; r1.y <- mWorld._m13; r1.z <- mWorld._m23; r1.w <- mWorld._m33
                dp4 r5.x, v0.xyzw, r2.xyzw  // r5.x <- PosW.x
                dp4 r5.y, v0.xyzw, r3.xyzw  // r5.y <- PosW.y
                dp4 r5.z, v0.xyzw, r4.xyzw  // r5.z <- PosW.z
                dp4 r5.w, v0.xyzw, r1.xyzw  // r5.w <- PosW.w
                dp4 r1.x, r5.xyzw, cb0[4].xyzw  // r1.x <- output.Pos.x
                dp4 r1.y, r5.xyzw, cb0[5].xyzw  // r1.y <- output.Pos.y
                dp4 r1.z, r5.xyzw, cb0[6].xyzw  // r1.z <- output.Pos.z
                dp4 r1.w, r5.xyzw, cb0[7].xyzw  // r1.w <- output.Pos.w
                dp4 r6.x, r1.xyzw, cb0[8].xyzw  // r6.x <- output.Pos.x
                dp4 r6.y, r1.xyzw, cb0[9].xyzw  // r6.y <- output.Pos.y
                dp4 r6.z, r1.xyzw, cb0[10].xyzw  // r6.z <- output.Pos.z
                dp4 r6.w, r1.xyzw, cb0[11].xyzw  // r6.w <- output.Pos.w
                dp3 r1.x, v1.xyzx, r2.xyzx
                dp3 r1.y, v1.xyzx, r3.xyzx
                dp3 r1.z, v1.xyzx, r4.xyzx
                dp3 r1.w, r1.xyzx, r1.xyzx
                rsq r1.w, r1.w
                mul r1.xyz, r1.wwww, r1.xyzx  // r1.x <- output.Normal.x; r1.y <- output.Normal.y; r1.z <- output.Normal.z
                mov r2.xy, v2.xyxx  // r2.x <- output.Tex.x; r2.y <- output.Tex.y
                mov r6.xyzw, r6.xyzw  // r6.x <- output.PosH.x; r6.y <- output.PosH.y; r6.z <- output.PosH.z; r6.w <- output.PosH.w
                itof r1.w, l(1)
                mov r3.xyzw, -r5.xyzw
                add r4.xyz, r3.xyzx, cb0[40].xyzx
                add r4.w, r1.w, r3.w
                dp4 r1.w, r4.xyzw, r4.xyzw
                rsq r1.w, r1.w
                mul r3.xyz, r1.wwww, r4.xyzx  // r3.x <- output.toEye.x; r3.y <- output.toEye.y; r3.z <- output.toEye.z
                
                #line 79
                mul r4.xyzw, cb0[12].xyzw, cb0[24].xxxx
                mul r7.xyzw, cb0[13].xyzw, cb0[24].yyyy
                add r4.xyzw, r4.xyzw, r7.xyzw
                mul r7.xyzw, cb0[14].xyzw, cb0[24].zzzz
                add r4.xyzw, r4.xyzw, r7.xyzw
                mul r7.xyzw, cb0[15].xyzw, cb0[24].wwww
                add r4.xyzw, r4.xyzw, r7.xyzw
                mul r7.xyzw, cb0[12].xyzw, cb0[25].xxxx
                mul r8.xyzw, cb0[13].xyzw, cb0[25].yyyy
                add r7.xyzw, r7.xyzw, r8.xyzw
                mul r8.xyzw, cb0[14].xyzw, cb0[25].zzzz
                add r7.xyzw, r7.xyzw, r8.xyzw
                mul r8.xyzw, cb0[15].xyzw, cb0[25].wwww
                add r7.xyzw, r7.xyzw, r8.xyzw
                mul r8.xyzw, cb0[12].xyzw, cb0[26].xxxx
                mul r9.xyzw, cb0[13].xyzw, cb0[26].yyyy
                add r8.xyzw, r8.xyzw, r9.xyzw
                mul r9.xyzw, cb0[14].xyzw, cb0[26].zzzz
                add r8.xyzw, r8.xyzw, r9.xyzw
                mul r9.xyzw, cb0[15].xyzw, cb0[26].wwww
                add r8.xyzw, r8.xyzw, r9.xyzw
                mul r9.xyzw, cb0[12].xyzw, cb0[27].xxxx
                mul r10.xyzw, cb0[13].xyzw, cb0[27].yyyy
                add r9.xyzw, r9.xyzw, r10.xyzw
                mul r10.xyzw, cb0[14].xyzw, cb0[27].zzzz
                add r9.xyzw, r9.xyzw, r10.xyzw
                mul r10.xyzw, cb0[15].xyzw, cb0[27].wwww
                add r9.xyzw, r9.xyzw, r10.xyzw
                mov x0[0].x, r4.x
                mov x0[1].x, r7.x
                mov x0[2].x, r8.x
                mov x0[3].x, r9.x
                mov x0[0].y, r4.y
                mov x0[1].y, r7.y
                mov x0[2].y, r8.y
                mov x0[3].y, r9.y
                mov x0[0].z, r4.z
                mov x0[1].z, r7.z
                mov x0[2].z, r8.z
                mov x0[3].z, r9.z
                mov x0[0].w, r4.w
                mov x0[1].w, r7.w
                mov x0[2].w, r8.w
                mov x0[3].w, r9.w
                mov r4.x, x0[0].x
                mov r4.y, x0[1].x
                mov r4.z, x0[2].x
                mov r4.w, x0[3].x
                mov r7.x, x0[0].y
                mov r7.y, x0[1].y
                mov r7.z, x0[2].y
                mov r7.w, x0[3].y
                mov r8.x, x0[0].z
                mov r8.y, x0[1].z
                mov r8.z, x0[2].z
                mov r8.w, x0[3].z
                mov r9.x, x0[0].w
                mov r9.y, x0[1].w
                mov r9.z, x0[2].w
                mov r9.w, x0[3].w
                dp4 r1.w, r4.xyzw, cb0[36].xyzw
                dp4 r2.z, r4.xyzw, cb0[37].xyzw
                dp4 r2.w, r4.xyzw, cb0[38].xyzw
                dp4 r3.w, r4.xyzw, cb0[39].xyzw
                dp4 r4.x, r7.xyzw, cb0[36].xyzw
                dp4 r4.y, r7.xyzw, cb0[37].xyzw
                dp4 r4.z, r7.xyzw, cb0[38].xyzw
                dp4 r4.w, r7.xyzw, cb0[39].xyzw
                dp4 r7.x, r8.xyzw, cb0[36].xyzw
                dp4 r7.y, r8.xyzw, cb0[37].xyzw
                dp4 r7.z, r8.xyzw, cb0[38].xyzw
                dp4 r7.w, r8.xyzw, cb0[39].xyzw
                dp4 r8.x, r9.xyzw, cb0[36].xyzw
                dp4 r8.y, r9.xyzw, cb0[37].xyzw
                dp4 r8.z, r9.xyzw, cb0[38].xyzw
                dp4 r8.w, r9.xyzw, cb0[39].xyzw
                mov x1[0].x, r1.w
                mov x1[1].x, r2.z
                mov x1[2].x, r2.w
                mov x1[3].x, r3.w
                mov x1[0].y, r4.x
                mov x1[1].y, r4.y
                mov x1[2].y, r4.z
                mov x1[3].y, r4.w
                mov x1[0].z, r7.x
                mov x1[1].z, r7.y
                mov x1[2].z, r7.z
                mov x1[3].z, r7.w
                mov x1[0].w, r8.x
                mov x1[1].w, r8.y
                mov x1[2].w, r8.z
                mov x1[3].w, r8.w
                mul r4.xyzw, cb0[16].xyzw, cb0[28].xxxx
                mul r7.xyzw, cb0[17].xyzw, cb0[28].yyyy
                add r4.xyzw, r4.xyzw, r7.xyzw
                mul r7.xyzw, cb0[18].xyzw, cb0[28].zzzz
                add r4.xyzw, r4.xyzw, r7.xyzw
                mul r7.xyzw, cb0[19].xyzw, cb0[28].wwww
                add r4.xyzw, r4.xyzw, r7.xyzw
                mul r7.xyzw, cb0[16].xyzw, cb0[29].xxxx
                mul r8.xyzw, cb0[17].xyzw, cb0[29].yyyy
                add r7.xyzw, r7.xyzw, r8.xyzw
                mul r8.xyzw, cb0[18].xyzw, cb0[29].zzzz
                add r7.xyzw, r7.xyzw, r8.xyzw
                mul r8.xyzw, cb0[19].xyzw, cb0[29].wwww
                add r7.xyzw, r7.xyzw, r8.xyzw
                mul r8.xyzw, cb0[16].xyzw, cb0[30].xxxx
                mul r9.xyzw, cb0[17].xyzw, cb0[30].yyyy
                add r8.xyzw, r8.xyzw, r9.xyzw
                mul r9.xyzw, cb0[18].xyzw, cb0[30].zzzz
                add r8.xyzw, r8.xyzw, r9.xyzw
                mul r9.xyzw, cb0[19].xyzw, cb0[30].wwww
                add r8.xyzw, r8.xyzw, r9.xyzw
                mul r9.xyzw, cb0[16].xyzw, cb0[31].xxxx
                mul r10.xyzw, cb0[17].xyzw, cb0[31].yyyy
                add r9.xyzw, r9.xyzw, r10.xyzw
                mul r10.xyzw, cb0[18].xyzw, cb0[31].zzzz
                add r9.xyzw, r9.xyzw, r10.xyzw
                mul r10.xyzw, cb0[19].xyzw, cb0[31].wwww
                add r9.xyzw, r9.xyzw, r10.xyzw
                mov x0[4].x, r4.x
                mov x0[5].x, r7.x
                mov x0[6].x, r8.x
                mov x0[7].x, r9.x
                mov x0[4].y, r4.y
                mov x0[5].y, r7.y
                mov x0[6].y, r8.y
                mov x0[7].y, r9.y
                mov x0[4].z, r4.z
                mov x0[5].z, r7.z
                mov x0[6].z, r8.z
                mov x0[7].z, r9.z
                mov x0[4].w, r4.w
                mov x0[5].w, r7.w
                mov x0[6].w, r8.w
                mov x0[7].w, r9.w
                mov r4.x, x0[4].x
                mov r4.y, x0[5].x
                mov r4.z, x0[6].x
                mov r4.w, x0[7].x
                mov r7.x, x0[4].y
                mov r7.y, x0[5].y
                mov r7.z, x0[6].y
                mov r7.w, x0[7].y
                mov r8.x, x0[4].z
                mov r8.y, x0[5].z
                mov r8.z, x0[6].z
                mov r8.w, x0[7].z
                mov r9.x, x0[4].w
                mov r9.y, x0[5].w
                mov r9.z, x0[6].w
                mov r9.w, x0[7].w
                dp4 r1.w, r4.xyzw, cb0[36].xyzw
                dp4 r2.z, r4.xyzw, cb0[37].xyzw
                dp4 r2.w, r4.xyzw, cb0[38].xyzw
                dp4 r3.w, r4.xyzw, cb0[39].xyzw
                dp4 r4.x, r7.xyzw, cb0[36].xyzw
                dp4 r4.y, r7.xyzw, cb0[37].xyzw
                dp4 r4.z, r7.xyzw, cb0[38].xyzw
                dp4 r4.w, r7.xyzw, cb0[39].xyzw
                dp4 r7.x, r8.xyzw, cb0[36].xyzw
                dp4 r7.y, r8.xyzw, cb0[37].xyzw
                dp4 r7.z, r8.xyzw, cb0[38].xyzw
                dp4 r7.w, r8.xyzw, cb0[39].xyzw
                dp4 r8.x, r9.xyzw, cb0[36].xyzw
                dp4 r8.y, r9.xyzw, cb0[37].xyzw
                dp4 r8.z, r9.xyzw, cb0[38].xyzw
                dp4 r8.w, r9.xyzw, cb0[39].xyzw
                mov x1[4].x, r1.w
                mov x1[5].x, r2.z
                mov x1[6].x, r2.w
                mov x1[7].x, r3.w
                mov x1[4].y, r4.x
                mov x1[5].y, r4.y
                mov x1[6].y, r4.z
                mov x1[7].y, r4.w
                mov x1[4].z, r7.x
                mov x1[5].z, r7.y
                mov x1[6].z, r7.z
                mov x1[7].z, r7.w
                mov x1[4].w, r8.x
                mov x1[5].w, r8.y
                mov x1[6].w, r8.z
                mov x1[7].w, r8.w
                mul r4.xyzw, cb0[20].xyzw, cb0[32].xxxx
                mul r7.xyzw, cb0[21].xyzw, cb0[32].yyyy
                add r4.xyzw, r4.xyzw, r7.xyzw
                mul r7.xyzw, cb0[22].xyzw, cb0[32].zzzz
                add r4.xyzw, r4.xyzw, r7.xyzw
                mul r7.xyzw, cb0[23].xyzw, cb0[32].wwww
                add r4.xyzw, r4.xyzw, r7.xyzw
                mul r7.xyzw, cb0[20].xyzw, cb0[33].xxxx
                mul r8.xyzw, cb0[21].xyzw, cb0[33].yyyy
                add r7.xyzw, r7.xyzw, r8.xyzw
                mul r8.xyzw, cb0[22].xyzw, cb0[33].zzzz
                add r7.xyzw, r7.xyzw, r8.xyzw
                mul r8.xyzw, cb0[23].xyzw, cb0[33].wwww
                add r7.xyzw, r7.xyzw, r8.xyzw
                mul r8.xyzw, cb0[20].xyzw, cb0[34].xxxx
                mul r9.xyzw, cb0[21].xyzw, cb0[34].yyyy
                add r8.xyzw, r8.xyzw, r9.xyzw
                mul r9.xyzw, cb0[22].xyzw, cb0[34].zzzz
                add r8.xyzw, r8.xyzw, r9.xyzw
                mul r9.xyzw, cb0[23].xyzw, cb0[34].wwww
                add r8.xyzw, r8.xyzw, r9.xyzw
                mul r9.xyzw, cb0[20].xyzw, cb0[35].xxxx
                mul r10.xyzw, cb0[21].xyzw, cb0[35].yyyy
                add r9.xyzw, r9.xyzw, r10.xyzw
                mul r10.xyzw, cb0[22].xyzw, cb0[35].zzzz
                add r9.xyzw, r9.xyzw, r10.xyzw
                mul r10.xyzw, cb0[23].xyzw, cb0[35].wwww
                add r9.xyzw, r9.xyzw, r10.xyzw
                mov x0[8].x, r4.x
                mov x0[9].x, r7.x
                mov x0[10].x, r8.x
                mov x0[11].x, r9.x
                mov x0[8].y, r4.y
                mov x0[9].y, r7.y
                mov x0[10].y, r8.y
                mov x0[11].y, r9.y
                mov x0[8].z, r4.z
                mov x0[9].z, r7.z
                mov x0[10].z, r8.z
                mov x0[11].z, r9.z
                mov x0[8].w, r4.w
                mov x0[9].w, r7.w
                mov x0[10].w, r8.w
                mov x0[11].w, r9.w
                mov r4.x, x0[8].x
                mov r4.y, x0[9].x
                mov r4.z, x0[10].x
                mov r4.w, x0[11].x
                mov r7.x, x0[8].y
                mov r7.y, x0[9].y
                mov r7.z, x0[10].y
                mov r7.w, x0[11].y
                mov r8.x, x0[8].z
                mov r8.y, x0[9].z
                mov r8.z, x0[10].z
                mov r8.w, x0[11].z
                mov r9.x, x0[8].w
                mov r9.y, x0[9].w
                mov r9.z, x0[10].w
                mov r9.w, x0[11].w
                dp4 r1.w, r4.xyzw, cb0[36].xyzw
                dp4 r2.z, r4.xyzw, cb0[37].xyzw
                dp4 r2.w, r4.xyzw, cb0[38].xyzw
                dp4 r3.w, r4.xyzw, cb0[39].xyzw
                dp4 r4.x, r7.xyzw, cb0[36].xyzw
                dp4 r4.y, r7.xyzw, cb0[37].xyzw
                dp4 r4.z, r7.xyzw, cb0[38].xyzw
                dp4 r4.w, r7.xyzw, cb0[39].xyzw
                dp4 r7.x, r8.xyzw, cb0[36].xyzw
                dp4 r7.y, r8.xyzw, cb0[37].xyzw
                dp4 r7.z, r8.xyzw, cb0[38].xyzw
                dp4 r7.w, r8.xyzw, cb0[39].xyzw
                dp4 r8.x, r9.xyzw, cb0[36].xyzw
                dp4 r8.y, r9.xyzw, cb0[37].xyzw
                dp4 r8.z, r9.xyzw, cb0[38].xyzw
                dp4 r8.w, r9.xyzw, cb0[39].xyzw
                mov x1[8].x, r1.w
                mov x1[9].x, r2.z
                mov x1[10].x, r2.w
                mov x1[11].x, r3.w
                mov x1[8].y, r4.x
                mov x1[9].y, r4.y
                mov x1[10].y, r4.z
                mov x1[11].y, r4.w
                mov x1[8].z, r7.x
                mov x1[9].z, r7.y
                mov x1[10].z, r7.z
                mov x1[11].z, r7.w
                mov x1[8].w, r8.x
                mov x1[9].w, r8.y
                mov x1[10].w, r8.z
                mov x1[11].w, r8.w
                mov r4.x, x1[0].x
                mov r7.x, x1[1].x
                mov r8.x, x1[2].x
                mov r9.x, x1[3].x
                mov r4.y, x1[0].y
                mov r7.y, x1[1].y
                mov r8.y, x1[2].y
                mov r9.y, x1[3].y
                mov r4.z, x1[0].z
                mov r7.z, x1[1].z
                mov r8.z, x1[2].z
                mov r9.z, x1[3].z
                mov r4.w, x1[0].w
                mov r7.w, x1[1].w
                mov r8.w, x1[2].w
                mov r9.w, x1[3].w
                dp4 r4.x, r5.xyzw, r4.xyzw  // r4.x <- output.TexShadow0.x
                dp4 r4.y, r5.xyzw, r7.xyzw  // r4.y <- output.TexShadow0.y
                dp4 r4.z, r5.xyzw, r8.xyzw  // r4.z <- output.TexShadow0.z
                dp4 r4.w, r5.xyzw, r9.xyzw  // r4.w <- output.TexShadow0.w
                mov r7.x, x1[4].x
                mov r8.x, x1[5].x
                mov r9.x, x1[6].x
                mov r10.x, x1[7].x
                mov r7.y, x1[4].y
                mov r8.y, x1[5].y
                mov r9.y, x1[6].y
                mov r10.y, x1[7].y
                mov r7.z, x1[4].z
                mov r8.z, x1[5].z
                mov r9.z, x1[6].z
                mov r10.z, x1[7].z
                mov r7.w, x1[4].w
                mov r8.w, x1[5].w
                mov r9.w, x1[6].w
                mov r10.w, x1[7].w
                dp4 r7.x, r5.xyzw, r7.xyzw  // r7.x <- output.TexShadow1.x
                dp4 r7.y, r5.xyzw, r8.xyzw  // r7.y <- output.TexShadow1.y
                dp4 r7.z, r5.xyzw, r9.xyzw  // r7.z <- output.TexShadow1.z
                dp4 r7.w, r5.xyzw, r10.xyzw  // r7.w <- output.TexShadow1.w
                mov r8.x, x1[8].x
                mov r9.x, x1[9].x
                mov r10.x, x1[10].x
                mov r11.x, x1[11].x
                mov r8.y, x1[8].y
                mov r9.y, x1[9].y
                mov r10.y, x1[10].y
                mov r11.y, x1[11].y
                mov r8.z, x1[8].z
                mov r9.z, x1[9].z
                mov r10.z, x1[10].z
                mov r11.z, x1[11].z
                mov r8.w, x1[8].w
                mov r9.w, x1[9].w
                mov r10.w, x1[10].w
                mov r11.w, x1[11].w
                dp4 r8.x, r5.xyzw, r8.xyzw  // r8.x <- output.TexShadow2.x
                dp4 r8.y, r5.xyzw, r9.xyzw  // r8.y <- output.TexShadow2.y
                dp4 r8.z, r5.xyzw, r10.xyzw  // r8.z <- output.TexShadow2.z
                dp4 r8.w, r5.xyzw, r11.xyzw  // r8.w <- output.TexShadow2.w
                
                #line 90
                mov r9.x, x0[2].x
                mov r10.x, x0[3].x
                mov r9.y, x0[2].y
                mov r10.y, x0[3].y
                mov r9.z, x0[2].z
                mov r10.z, x0[3].z
                mov r9.w, x0[2].w
                mov r10.w, x0[3].w
                dp4 r9.x, r5.xyzw, r9.xyzw  // r9.x <- output.Depth0.x
                dp4 r9.y, r5.xyzw, r10.xyzw  // r9.y <- output.Depth0.y
                mov r10.x, x0[6].x
                mov r11.x, x0[7].x
                mov r10.y, x0[6].y
                mov r11.y, x0[7].y
                mov r10.z, x0[6].z
                mov r11.z, x0[7].z
                mov r10.w, x0[6].w
                mov r11.w, x0[7].w
                dp4 r2.z, r5.xyzw, r10.xyzw  // r2.z <- output.Depth0.z
                dp4 r2.w, r5.xyzw, r11.xyzw  // r2.w <- output.Depth0.w
                mov r10.x, x0[10].x
                mov r11.x, x0[11].x
                mov r10.y, x0[10].y
                mov r11.y, x0[11].y
                mov r10.z, x0[10].z
                mov r11.z, x0[11].z
                mov r10.w, x0[10].w
                mov r11.w, x0[11].w
                dp4 r9.z, r5.xyzw, r10.xyzw  // r9.z <- output.Depth1.x
                dp4 r9.w, r5.xyzw, r11.xyzw  // r9.w <- output.Depth1.y
                dp4 r1.w, r5.xyzw, cb4[0].xyzw  // r1.w <- output.clip
                mov o0.xyzw, r6.xyzw
                mov o2.xyzw, r0.xyzw
                mov o3.xy, r2.xyxx
                mov o3.zw, r9.zzzw
                mov o4.xyzw, r4.xyzw
                mov o5.xyzw, r7.xyzw
                mov o6.xyzw, r8.xyzw
                mov o7.xyzw, r6.xyzw
                mov o9.xy, r9.xyxx
                mov o9.zw, r2.zzzw
                mov o1.xyz, r1.xyzx
                mov o8.xyz, r3.xyzx
                mov o10.x, r1.w
                ret 
                // Approximately 414 instruction slots used
                            
            };
            GeometryShader = NULL;
            HullShader = NULL;
            DomainShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbLight
                // {
                //
                //   float4 gLight_Ambient;             // Offset:    0 Size:    16
                //   float4 gLight_Diffuse;             // Offset:   16 Size:    16
                //   float4 gLight_Specular;            // Offset:   32 Size:    16
                //   float3 gLight_Direction;           // Offset:   48 Size:    12
                //   float3 gLight_PosW;                // Offset:   64 Size:    12 [unused]
                //
                // }
                //
                // cbuffer cbMaetrial
                // {
                //
                //   float4 gMtrl_Ambient;              // Offset:    0 Size:    16
                //   float4 gMtrl_Diffuse;              // Offset:   16 Size:    16
                //   float4 gMtrl_Specular;             // Offset:   32 Size:    16
                //   float4 gMtrl_Emissive;             // Offset:   48 Size:    16 [unused]
                //   float gMtrl_Pow;                   // Offset:   64 Size:     4
                //
                // }
                //
                // cbuffer cbSkinning
                // {
                //
                //   float4x4 gPalette[64];             // Offset:    0 Size:  4096 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samLinear                         sampler      NA          NA    0        1
                // samShadow                       sampler_c      NA          NA    1        1
                // txDiffuse                         texture  float4          2d    0        1
                // txShadow0                         texture  float4          2d    4        1
                // txShadow1                         texture  float4          2d    5        1
                // txShadow2                         texture  float4          2d    6        1
                // cbLight                           cbuffer      NA          NA    1        1
                // cbMaetrial                        cbuffer      NA          NA    2        1
                // cbSkinning                        cbuffer      NA          NA    5        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // COLOR                    0   xyzw        2     NONE   float       
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 7     zw        3     NONE   float     zw
                // TEXCOORD                 1   xyzw        4     NONE   float   xy  
                // TEXCOORD                 2   xyzw        5     NONE   float   xy  
                // TEXCOORD                 3   xyzw        6     NONE   float   xy  
                // TEXCOORD                 4   xyzw        7     NONE   float       
                // TEXCOORD                 5   xyz         8     NONE   float   xyz 
                // TEXCOORD                 6   xyzw        9     NONE   float   xyzw
                // SV_ClipDistance          0   x          10  CLIPDST   float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb1[4], immediateIndexed
                dcl_constantbuffer cb2[5], immediateIndexed
                dcl_constantbuffer cb5[1], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_sampler s1, mode_comparison
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t4
                dcl_resource_texture2d (float,float,float,float) t5
                dcl_resource_texture2d (float,float,float,float) t6
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v3.xy
                dcl_input_ps linear v3.zw
                dcl_input_ps linear v4.xy
                dcl_input_ps linear v5.xy
                dcl_input_ps linear v6.xy
                dcl_input_ps linear v8.xyz
                dcl_input_ps linear v9.xyzw
                dcl_output o0.xyzw
                dcl_temps 5
                dcl_indexableTemp x0[27], 4
                //
                // Initial variable locations:
                //   v0.x <- In.Pos.x; v0.y <- In.Pos.y; v0.z <- In.Pos.z; v0.w <- In.Pos.w; 
                //   v1.x <- In.Normal.x; v1.y <- In.Normal.y; v1.z <- In.Normal.z; 
                //   v2.x <- In.Color.x; v2.y <- In.Color.y; v2.z <- In.Color.z; v2.w <- In.Color.w; 
                //   v3.x <- In.Tex.x; v3.y <- In.Tex.y; 
                //   v4.x <- In.TexShadow0.x; v4.y <- In.TexShadow0.y; v4.z <- In.TexShadow0.z; v4.w <- In.TexShadow0.w; 
                //   v5.x <- In.TexShadow1.x; v5.y <- In.TexShadow1.y; v5.z <- In.TexShadow1.z; v5.w <- In.TexShadow1.w; 
                //   v6.x <- In.TexShadow2.x; v6.y <- In.TexShadow2.y; v6.z <- In.TexShadow2.z; v6.w <- In.TexShadow2.w; 
                //   v7.x <- In.PosH.x; v7.y <- In.PosH.y; v7.z <- In.PosH.z; v7.w <- In.PosH.w; 
                //   v8.x <- In.toEye.x; v8.y <- In.toEye.y; v8.z <- In.toEye.z; 
                //   v9.x <- In.Depth0.x; v9.y <- In.Depth0.y; v9.z <- In.Depth0.z; v9.w <- In.Depth0.w; 
                //   v3.z <- In.Depth1.x; v3.w <- In.Depth1.y; 
                //   v10.x <- In.clip; 
                //   o0.x <- <PS_ShadowMap return value>.x; o0.y <- <PS_ShadowMap return value>.y; o0.z <- <PS_ShadowMap return value>.z; o0.w <- <PS_ShadowMap return value>.w
                //
                #line 105 "D:\Project\Shader-Practice\Src\ForwardLight_AmbientLight\ForwardLight_AmbientLight\hlsl.fx"
                nop 
                mov r0.xyzw, v9.xyzw
                mov r1.xy, v3.zwzz
                mov r1.zw, v4.xxxy
                mov r2.xy, v5.xyxx
                mov r2.zw, v6.xxxy
                
                #line 286 "D:\Project\Shader-Practice\Src\ForwardLight_AmbientLight\ForwardLight_AmbientLight\common.fx"
                mov r3.y, l(0.000977)  // r3.y <- dx
                div r0.x, r0.x, r0.y
                min r0.x, r0.x, l(1.000000)  // r0.x <- depth0
                div r0.y, r0.z, r0.w
                min r0.y, r0.y, l(1.000000)  // r0.y <- depth1
                div r0.z, r1.x, r1.y
                min r0.z, r0.z, l(1.000000)  // r0.z <- depth2
                
                #line 295
                mov x0[0].xy, r1.zwzz
                mov r1.x, -r3.y
                mov r1.y, l(0)
                add r1.xy, r1.xyxx, r1.zwzz
                mov x0[1].xy, r1.xyxx
                mov r3.z, l(0)
                add r1.xy, r1.zwzz, r3.yzyy
                mov x0[2].xy, r1.xyxx
                mov r1.y, -r3.y
                mov r1.x, l(0)
                add r1.xy, r1.xyxx, r1.zwzz
                mov x0[3].xy, r1.xyxx
                add r1.xy, r1.zwzz, r3.zyzz
                mov x0[6].xy, r1.xyxx
                mov r1.x, -r3.y
                mov r1.y, -r3.y
                add r1.xy, r1.xyxx, r1.zwzz
                mov x0[4].xy, r1.xyxx
                mov r3.w, -r3.y
                add r1.xy, r1.zwzz, r3.ywyy
                mov x0[5].xy, r1.xyxx
                mov r3.x, -r3.y
                add r1.xy, r1.zwzz, r3.xyxx
                mov x0[7].xy, r1.xyxx
                add r1.xy, r1.zwzz, r3.yyyy
                mov x0[8].xy, r1.xyxx
                mov x0[9].xy, r2.xyxx
                
                #line 306
                mov r1.x, -r3.y
                mov r1.y, l(0)
                add r1.xy, r1.xyxx, r2.xyxx
                mov x0[10].xy, r1.xyxx
                add r1.xy, r2.xyxx, r3.yzyy
                mov x0[11].xy, r1.xyxx
                mov r1.y, -r3.y
                mov r1.x, l(0)
                add r1.xy, r1.xyxx, r2.xyxx
                mov x0[12].xy, r1.xyxx
                add r1.xy, r2.xyxx, r3.zyzz
                mov x0[15].xy, r1.xyxx
                mov r1.x, -r3.y
                mov r1.y, -r3.y
                add r1.xy, r1.xyxx, r2.xyxx
                mov x0[13].xy, r1.xyxx
                mov r1.z, -r3.y
                mov r1.y, r3.y
                add r3.xw, r1.yyyz, r2.xxxy
                mov x0[14].xy, r3.xwxx
                mov r1.x, -r3.y
                add r3.xw, r1.xxxy, r2.xxxy
                mov x0[16].xy, r3.xwxx
                add r2.xy, r2.xyxx, r3.yyyy
                mov x0[17].xy, r2.xyxx
                mov x0[18].xy, r2.zwzz
                mov r2.x, -r3.y
                mov r2.y, l(0)
                add r2.xy, r2.xyxx, r2.zwzz
                mov x0[19].xy, r2.xyxx
                
                #line 317
                add r2.xy, r2.zwzz, r3.yzyy
                mov x0[20].xy, r2.xyxx
                mov r2.y, -r3.y
                mov r2.x, l(0)
                add r2.xy, r2.xyxx, r2.zwzz
                mov x0[21].xy, r2.xyxx
                add r2.xy, r2.zwzz, r3.zyzz
                mov x0[24].xy, r2.xyxx
                mov r2.x, -r3.y
                mov r2.y, -r3.y
                add r2.xy, r2.xyxx, r2.zwzz
                mov x0[22].xy, r2.xyxx
                mov r1.w, -r3.y
                add r1.zw, r1.yyyw, r2.zzzw
                mov x0[23].xy, r1.zwzz
                mov r1.x, -r3.y
                add r1.xy, r1.xyxx, r2.zwzz
                mov x0[25].xy, r1.xyxx
                add r1.xy, r2.zwzz, r3.yyyy
                mov x0[26].xy, r1.xyxx
                mov r0.w, l(-0.001000)
                add r0.x, r0.w, r0.x  // r0.x <- S0
                mov r0.w, l(-0.001000)
                add r0.y, r0.w, r0.y  // r0.y <- S1
                mov r0.w, l(-0.001000)
                add r0.z, r0.w, r0.z  // r0.z <- S2
                
                #line 329
                mov r0.w, l(0)  // r0.w <- fShadowTerm
                mov r1.x, l(0)  // r1.x <- i
                mov r1.y, r0.w  // r1.y <- fShadowTerm
                mov r1.z, r1.x  // r1.z <- i
                loop 
                  ilt r1.w, r1.z, l(9)
                  breakc_z r1.w
                  mov r2.xy, x0[r1.z + 0].xyxx
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r1.w, r2.xyxx, t4.xxxx, s1, r0.x  // r1.w <- D0
                  mov r2.xy, x0[r1.z + 9].xyxx
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r2.x, r2.xyxx, t5.xxxx, s1, r0.y  // r2.x <- D1
                  mov r2.yz, x0[r1.z + 18].xxyx
                  sample_c_lz_indexable(texture2d)(float,float,float,float) r2.y, r2.yzyy, t6.xxxx, s1, r0.z  // r2.y <- D2
                  itof r2.z, l(1)
                  add r1.w, r1.w, r2.x
                  add r1.w, r2.y, r1.w
                  max r1.w, r1.w, l(0.000000)
                  min r1.w, r1.w, l(1.000000)
                  mov r1.w, -r1.w
                  add r1.w, r1.w, r2.z
                  add r1.y, r1.w, r1.y
                  iadd r1.z, r1.z, l(1)
                endloop 
                div r0.x, r1.y, l(9.000000)  // r0.x <- fShadowTerm
                
                #line 340
                mov r0.x, r0.x  // r0.x <- <GetShadowPCF return value>
                
                #line 105 "D:\Project\Shader-Practice\Src\ForwardLight_AmbientLight\ForwardLight_AmbientLight\hlsl.fx"
                mov r0.x, r0.x  // r0.x <- fShadowTerm
                nop 
                mul r0.x, r0.x, l(0.900000)
                
                #line 384 "D:\Project\Shader-Practice\Src\ForwardLight_AmbientLight\ForwardLight_AmbientLight\common.fx"
                mov r0.yzw, -cb1[3].xxyz  // r0.y <- L.x; r0.z <- L.y; r0.w <- L.z
                dp3 r1.x, v8.xyzx, v8.xyzx
                rsq r1.x, r1.x
                mul r1.xyz, r1.xxxx, v8.xyzx
                add r1.xyz, r0.yzwy, r1.xyzx
                dp3 r1.w, r1.xyzx, r1.xyzx
                rsq r1.w, r1.w
                mul r1.xyz, r1.wwww, r1.xyzx  // r1.x <- H.x; r1.y <- H.y; r1.z <- H.z
                dp3 r1.w, v1.xyzx, v1.xyzx
                rsq r1.w, r1.w
                mul r2.xyz, r1.wwww, v1.xyzx  // r2.x <- N.x; r2.y <- N.y; r2.z <- N.z
                itof r1.w, l(0)
                dp3 r0.y, r2.xyzx, r0.yzwy
                max r0.y, r0.y, r1.w  // r0.y <- lightV
                mul r3.xyz, cb1[0].xyzx, cb2[0].xyzx
                mul r4.xyz, cb1[1].xyzx, cb2[1].xyzx
                mul r4.xyz, r4.xyzx, l(0.100000, 0.100000, 0.100000, 0.000000)
                add r3.xyz, r3.xyzx, r4.xyzx
                mul r4.xyz, cb1[1].xyzx, cb2[1].xyzx
                mul r4.xyz, r0.yyyy, r4.xyzx
                mul r4.xyz, r4.xyzx, l(0.100000, 0.100000, 0.100000, 0.000000)
                add r3.xyz, r3.xyzx, r4.xyzx
                mul r4.xyz, cb1[1].xyzx, cb2[1].xyzx
                mul r0.yzw, r0.yyyy, r4.xxyz
                mul r0.xyz, r0.xxxx, r0.yzwy
                mul r0.xyz, r0.xyzx, l(0.900000, 0.900000, 0.900000, 0.000000)
                add r0.xyz, r0.xyzx, r3.xyzx
                mul r3.xyz, cb1[2].xyzx, cb2[2].xyzx
                itof r0.w, l(0)
                dp3 r1.x, r2.xyzx, r1.xyzx
                max r0.w, r0.w, r1.x
                log r0.w, r0.w
                mul r0.w, r0.w, cb2[4].x
                exp r0.w, r0.w
                mul r1.xyz, r0.wwww, r3.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- color.x; r0.y <- color.y; r0.z <- color.z
                
                #line 395
                mov r0.xyz, r0.xyzx  // r0.x <- <GetLightingColor return value>.x; r0.y <- <GetLightingColor return value>.y; r0.z <- <GetLightingColor return value>.z
                
                #line 107 "D:\Project\Shader-Practice\Src\ForwardLight_AmbientLight\ForwardLight_AmbientLight\hlsl.fx"
                mov r0.xyz, r0.xyzx  // r0.x <- color.x; r0.y <- color.y; r0.z <- color.z
                sample_indexable(texture2d)(float,float,float,float) r1.xyzw, v3.xyxx, t0.xyzw, s0  // r1.x <- texColor.x; r1.y <- texColor.y; r1.z <- texColor.z; r1.w <- texColor.w
                mul r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- Out.x; r0.y <- Out.y; r0.z <- Out.z
                mul o0.w, r1.w, cb2[1].w
                mov o0.xyz, r0.xyzx
                ret 
                // Approximately 167 instruction slots used
                            
            };
        }

    }

    technique11 BuildShadowMap_Instancing
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gView;                    // Offset:   64 Size:    64
                //   float4x4 gProjection;              // Offset:  128 Size:    64
                //   float4x4 gLightView[3];            // Offset:  192 Size:   192 [unused]
                //   float4x4 gLightProj[3];            // Offset:  384 Size:   192 [unused]
                //   float4x4 gLightTT;                 // Offset:  576 Size:    64 [unused]
                //   float3 gEyePosW;                   // Offset:  640 Size:    12 [unused]
                //
                // }
                //
                // cbuffer cbPerFrameInstancing
                // {
                //
                //   float4x4 gWorldInst[256];          // Offset:    0 Size: 16384
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerFrameInstancing              cbuffer      NA          NA    3        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyzw        0     NONE   float   xyzw
                // NORMAL                   0   xyz         1     NONE   float       
                // TEXCOORD                 0   xy          2     NONE   float       
                // SV_InstanceID            0   x           3   INSTID    uint   x   
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[12], immediateIndexed
                dcl_constantbuffer cb3[1024], dynamicIndexed
                dcl_input v0.xyzw
                dcl_input_sgv v3.x, instance_id
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xy
                dcl_temps 4
                //
                // Initial variable locations:
                //   v0.x <- Pos.x; v0.y <- Pos.y; v0.z <- Pos.z; v0.w <- Pos.w; 
                //   v1.x <- Normal.x; v1.y <- Normal.y; v1.z <- Normal.z; 
                //   v2.x <- Tex.x; v2.y <- Tex.y; 
                //   v3.x <- instID; 
                //   o1.x <- <VS_BuildShadowMap return value>.Depth.x; o1.y <- <VS_BuildShadowMap return value>.Depth.y; 
                //   o0.x <- <VS_BuildShadowMap return value>.Pos.x; o0.y <- <VS_BuildShadowMap return value>.Pos.y; o0.z <- <VS_BuildShadowMap return value>.Pos.z; o0.w <- <VS_BuildShadowMap return value>.Pos.w
                //
                #line 125 "D:\Project\Shader-Practice\Src\ForwardLight_AmbientLight\ForwardLight_AmbientLight\hlsl.fx"
                imul null, r0.x, v3.x, l(4)
                mov r1.xyzw, cb3[r0.x + 0].xyzw  // r1.x <- mWorld._m00; r1.y <- mWorld._m10; r1.z <- mWorld._m20; r1.w <- mWorld._m30
                mov r2.xyzw, cb3[r0.x + 1].xyzw  // r2.x <- mWorld._m01; r2.y <- mWorld._m11; r2.z <- mWorld._m21; r2.w <- mWorld._m31
                mov r3.xyzw, cb3[r0.x + 2].xyzw  // r3.x <- mWorld._m02; r3.y <- mWorld._m12; r3.z <- mWorld._m22; r3.w <- mWorld._m32
                mov r0.xyzw, cb3[r0.x + 3].xyzw  // r0.x <- mWorld._m03; r0.y <- mWorld._m13; r0.z <- mWorld._m23; r0.w <- mWorld._m33
                dp4 r1.x, v0.xyzw, r1.xyzw  // r1.x <- output.Pos.x
                dp4 r1.y, v0.xyzw, r2.xyzw  // r1.y <- output.Pos.y
                dp4 r1.z, v0.xyzw, r3.xyzw  // r1.z <- output.Pos.z
                dp4 r1.w, v0.xyzw, r0.xyzw  // r1.w <- output.Pos.w
                dp4 r0.x, r1.xyzw, cb0[4].xyzw  // r0.x <- output.Pos.x
                dp4 r0.y, r1.xyzw, cb0[5].xyzw  // r0.y <- output.Pos.y
                dp4 r0.z, r1.xyzw, cb0[6].xyzw  // r0.z <- output.Pos.z
                dp4 r0.w, r1.xyzw, cb0[7].xyzw  // r0.w <- output.Pos.w
                dp4 r1.z, r0.xyzw, cb0[8].xyzw  // r1.z <- output.Pos.x
                dp4 r1.w, r0.xyzw, cb0[9].xyzw  // r1.w <- output.Pos.y
                dp4 r1.x, r0.xyzw, cb0[10].xyzw  // r1.x <- output.Pos.z
                dp4 r1.y, r0.xyzw, cb0[11].xyzw  // r1.y <- output.Pos.w
                mov r1.xy, r1.xyxx  // r1.x <- output.Depth.x; r1.y <- output.Depth.y
                mov o0.xyzw, r1.zwxy
                mov o1.xy, r1.xyxx
                ret 
                // Approximately 21 instruction slots used
                            
            };
            GeometryShader = NULL;
            HullShader = NULL;
            DomainShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbMaetrial
                // {
                //
                //   float4 gMtrl_Ambient;              // Offset:    0 Size:    16 [unused]
                //   float4 gMtrl_Diffuse;              // Offset:   16 Size:    16
                //   float4 gMtrl_Specular;             // Offset:   32 Size:    16 [unused]
                //   float4 gMtrl_Emissive;             // Offset:   48 Size:    16 [unused]
                //   float gMtrl_Pow;                   // Offset:   64 Size:     4 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbMaetrial                        cbuffer      NA          NA    2        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // TEXCOORD                 0   xy          1     NONE   float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb2[2], immediateIndexed
                dcl_output o0.xyzw
                dcl_temps 1
                //
                // Initial variable locations:
                //   v0.x <- In.Pos.x; v0.y <- In.Pos.y; v0.z <- In.Pos.z; v0.w <- In.Pos.w; 
                //   v1.x <- In.Depth.x; v1.y <- In.Depth.y; 
                //   o0.x <- <PS_BuildShadowMap return value>.x; o0.y <- <PS_BuildShadowMap return value>.y; o0.z <- <PS_BuildShadowMap return value>.z; o0.w <- <PS_BuildShadowMap return value>.w
                //
                #line 138 "D:\Project\Shader-Practice\Src\ForwardLight_AmbientLight\ForwardLight_AmbientLight\hlsl.fx"
                mov r0.x, l(-0.500000)
                add r0.x, r0.x, cb2[1].w
                lt r0.x, r0.x, l(0.000000)
                and r0.x, r0.x, l(-1)
                discard_nz r0.x
                itof o0.xyzw, l(1, 1, 1, 1)
                ret 
                // Approximately 7 instruction slots used
                            
            };
        }

    }

}

