//
// FX Version: fx_5_0
//
// 9 local buffer(s)
//
cbuffer $Globals
{
    float4  g_outlineColor = { 0.800000012, 0, 0, 1 };// Offset:    0, size:   16
}

cbuffer cbPerFrame : register(b0)
{
    float4x4 gWorld;                    // Offset:    0, size:   64
    float4x4 gView;                     // Offset:   64, size:   64
    float4x4 gProjection;               // Offset:  128, size:   64
    float4x4 gLightView[3];             // Offset:  192, size:  192
    float4x4 gLightProj[3];             // Offset:  384, size:  192
    float4x4 gLightTT;                  // Offset:  576, size:   64
    float3  gEyePosW;                   // Offset:  640, size:   12
}

cbuffer cbLight : register(b1)
{
    float4  gLight_Ambient;             // Offset:    0, size:   16
    float4  gLight_Diffuse;             // Offset:   16, size:   16
    float4  gLight_Specular;            // Offset:   32, size:   16
    float3  gLight_Direction;           // Offset:   48, size:   12
    float3  gLight_PosW;                // Offset:   64, size:   12
    float3  gLight_SpecIntensity;       // Offset:   80, size:   12
}

cbuffer cbMaetrial : register(b2)
{
    float4  gMtrl_Ambient;              // Offset:    0, size:   16
    float4  gMtrl_Diffuse;              // Offset:   16, size:   16
    float4  gMtrl_Specular;             // Offset:   32, size:   16
    float4  gMtrl_Emissive;             // Offset:   48, size:   16
    float   gMtrl_Pow;                  // Offset:   64, size:    4
}

cbuffer cbPerFrameInstancing : register(b3)
{
    float4x4 gWorldInst[256];           // Offset:    0, size: 16384
}

cbuffer cbClipPlane : register(b4)
{
    float4  gClipPlane;                 // Offset:    0, size:   16
}

cbuffer cbSkinning : register(b5)
{
    float4x4 gPalette[64];              // Offset:    0, size: 4096
}

cbuffer cbDirLight : register(b6)
{
    float4  AmbientDown;                // Offset:    0, size:   16
    float4  AmbientRange;               // Offset:   16, size:   16
    float4x4 ToShadowSpace;             // Offset:   32, size:   64
    float4  ToCascadeOffsetX;           // Offset:   96, size:   16
    float4  ToCascadeOffsetY;           // Offset:  112, size:   16
    float4  ToCascadeScale;             // Offset:  128, size:   16
}

cbuffer cbGBufferUnpack : register(b7)
{
    float4  PerspectiveValues;          // Offset:    0, size:   16
    float4x4 ViewInv;                   // Offset:   16, size:   64
}

//
// 22 local object(s)
//
Texture2D txDiffuse;
Texture2D txBump;
Texture2D txSpecular;
Texture2D txEmissive;
Texture2D txShadow0;
Texture2D txShadow1;
Texture2D txShadow2;
Texture2D txDepth;
SamplerState samLinear
{
    Filter   = uint(MIN_MAG_MIP_LINEAR /* 21 */);
    AddressU = uint(CLAMP /* 3 */);
    AddressV = uint(CLAMP /* 3 */);
    BorderColor = float4(1, 1, 1, 1);
};
SamplerComparisonState samShadow
{
    Filter   = uint(COMPARISON_MIN_MAG_LINEAR_MIP_POINT /* 148 */);
    AddressU = uint(BORDER /* 4 */);
    AddressV = uint(BORDER /* 4 */);
    AddressW = uint(BORDER /* 4 */);
    BorderColor = float4(1, 1, 1, 1);
};
SamplerComparisonState samDepth
{
    Filter   = uint(COMPARISON_MIN_MAG_LINEAR_MIP_POINT /* 148 */);
    AddressU = uint(BORDER /* 4 */);
    AddressV = uint(BORDER /* 4 */);
    AddressW = uint(BORDER /* 4 */);
    BorderColor = float4(0, 0, 0, 0);
    ComparisonFunc = uint(LESS_EQUAL /* 4 */);
};
SamplerState samAnis
{
    Filter   = uint(ANISOTROPIC /* 85 */);
    AddressU = uint(WRAP /* 1 */);
    AddressV = uint(WRAP /* 1 */);
};
RasterizerState Depth
{
    DepthBias = uint(10000);
    DepthBiasClamp = float(0);
    SlopeScaledDepthBias = float(1);
};
RasterizerState NoCull
{
    CullMode = uint(NONE /* 1 */);
};
DepthStencilState DepthNormal
{
    DepthFunc = uint(LESS_EQUAL /* 4 */);
    DepthEnable = bool(TRUE /* 1 */);
};
DepthStencilState NoDepthStencil
{
    DepthEnable = bool(FALSE /* 0 */);
};
Texture2D DepthTexture;
Texture2D ColorSpecIntTexture;
Texture2D NormalTexture;
Texture2D SpecPowTexture;
Texture2DArray CascadeShadowMapTexture;
SamplerComparisonState PCFSampler
{
    Filter   = uint(COMPARISON_MIN_MAG_LINEAR_MIP_POINT /* 148 */);
    AddressU = uint(CLAMP /* 3 */);
    AddressV = uint(CLAMP /* 3 */);
    AddressW = uint(CLAMP /* 3 */);
    BorderColor = float4(1, 1, 1, 1);
    ComparisonFunc = uint(LESS_EQUAL /* 4 */);
};

//
// 1 groups(s)
//
fxgroup
{
    //
    // 1 technique(s)
    //
    technique11 Unlit
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_VertexID              0   x           0   VERTID    uint   x   
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Position              0   xyzw        0      POS   float   xyzw
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_input_sgv v0.x, vertex_id
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xy
                dcl_temps 1
                dcl_indexableTemp x0[4], 4
                //
                // Initial variable locations:
                //   v0.x <- VertexID; 
                //   o1.x <- <VS return value>.cpPos.x; o1.y <- <VS return value>.cpPos.y; 
                //   o0.x <- <VS return value>.Position.x; o0.y <- <VS return value>.Position.y; o0.z <- <VS return value>.Position.z; o0.w <- <VS return value>.Position.w
                //
                #line 49 "D:\Project\Shader-Practice\Media\shadowmap_directionallight\dirlight.fx"
                mov x0[0].xy, l(-1.000000,1.000000,0,0)
                mov x0[1].xy, l(1.000000,1.000000,0,0)
                mov x0[2].xy, l(-1.000000,-1.000000,0,0)
                mov x0[3].xy, l(1.000000,-1.000000,0,0)
                
                #line 63
                mov r0.x, v0.x
                mov r0.xy, x0[r0.x + 0].xyxx  // r0.x <- Output.Position.x; r0.y <- Output.Position.y
                mov r0.zw, l(0,0,0,1.000000)  // r0.z <- Output.Position.z; r0.w <- Output.Position.w
                mov r0.xy, r0.xyxx  // r0.x <- Output.cpPos.x; r0.y <- Output.cpPos.y
                mov o0.xyzw, r0.xyzw
                mov o1.xy, r0.xyxx
                ret 
                // Approximately 11 instruction slots used
                            
            };
            GeometryShader = NULL;
            HullShader = NULL;
            DomainShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbLight
                // {
                //
                //   float4 gLight_Ambient;             // Offset:    0 Size:    16 [unused]
                //   float4 gLight_Diffuse;             // Offset:   16 Size:    16
                //   float4 gLight_Specular;            // Offset:   32 Size:    16 [unused]
                //   float3 gLight_Direction;           // Offset:   48 Size:    12
                //   float3 gLight_PosW;                // Offset:   64 Size:    12 [unused]
                //   float3 gLight_SpecIntensity;       // Offset:   80 Size:    12 [unused]
                //
                // }
                //
                // cbuffer cbDirLight
                // {
                //
                //   float4 AmbientDown;                // Offset:    0 Size:    16
                //   float4 AmbientRange;               // Offset:   16 Size:    16
                //   float4x4 ToShadowSpace;            // Offset:   32 Size:    64
                //   float4 ToCascadeOffsetX;           // Offset:   96 Size:    16
                //   float4 ToCascadeOffsetY;           // Offset:  112 Size:    16
                //   float4 ToCascadeScale;             // Offset:  128 Size:    16
                //
                // }
                //
                // cbuffer cbGBufferUnpack
                // {
                //
                //   float4 PerspectiveValues;          // Offset:    0 Size:    16
                //   float4x4 ViewInv;                  // Offset:   16 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // PCFSampler                      sampler_c      NA          NA    4        1
                // DepthTexture                      texture   float          2d    0        1
                // ColorSpecIntTexture               texture  float4          2d    1        1
                // NormalTexture                     texture  float3          2d    2        1
                // SpecPowTexture                    texture  float4          2d    3        1
                // CascadeShadowMapTexture           texture   float     2darray    4        1
                // cbLight                           cbuffer      NA          NA    1        1
                // cbDirLight                        cbuffer      NA          NA    6        1
                // cbGBufferUnpack                   cbuffer      NA          NA    7        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Position              0   xyzw        0      POS   float   xy  
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb1[4], immediateIndexed
                dcl_constantbuffer cb6[9], immediateIndexed
                dcl_constantbuffer cb7[4], immediateIndexed
                dcl_sampler s4, mode_comparison
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_resource_texture2d (float,float,float,float) t2
                dcl_resource_texture2d (float,float,float,float) t3
                dcl_resource_texture2darray (float,float,float,float) t4
                dcl_input_ps_siv linear noperspective v0.xy, position
                dcl_input_ps linear v1.xy
                dcl_output o0.xyzw
                dcl_temps 10
                //
                // Initial variable locations:
                //   v0.x <- In.Position.x; v0.y <- In.Position.y; v0.z <- In.Position.z; v0.w <- In.Position.w; 
                //   v1.x <- In.cpPos.x; v1.y <- In.cpPos.y; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 10 "D:\Project\Shader-Practice\Media\shadowmap_directionallight\dirlight.fx"
                mov r0.xy, l(10.000000,250.000000,0,0)  // r0.x <- g_SpecPowerRange.x; r0.y <- g_SpecPowerRange.y
                
                #line 221
                nop 
                ftoi r1.xy, v0.xyxx
                
                #line 203
                mov r1.xy, r1.xyxx  // r1.x <- location3.x; r1.y <- location3.y
                mov r1.zw, l(0,0,0,0)  // r1.w <- location3.z
                ld_indexable(texture2d)(float,float,float,float) r0.z, r1.xyww, t0.yzxw
                mov r0.z, r0.z  // r0.z <- depth
                nop 
                mov r0.z, r0.z
                
                #line 185
                add r0.z, r0.z, cb7[0].w
                div r2.z, cb7[0].z, r0.z  // r2.z <- linearDepth
                mov r2.z, r2.z  // r2.z <- <ConvertZToLinearDepth return value>
                
                #line 206
                mov r2.z, r2.z  // r2.z <- Out.LinearDepth
                ld_indexable(texture2d)(float,float,float,float) r3.xyzw, r1.xyww, t1.xyzw  // r3.x <- baseColorSpecInt.x; r3.y <- baseColorSpecInt.y; r3.z <- baseColorSpecInt.z; r3.w <- baseColorSpecInt.w
                mov r3.xyz, r3.xyzx  // r3.x <- Out.Color.x; r3.y <- Out.Color.y; r3.z <- Out.Color.z
                mov r2.y, r3.w  // r2.y <- Out.SpecIntensity
                ld_indexable(texture2d)(float,float,float,float) r4.xyz, r1.xyww, t2.xyzw
                mov r4.xyz, r4.xyzx  // r4.x <- Out.Normal.x; r4.y <- Out.Normal.y; r4.z <- Out.Normal.z
                mul r4.xyz, r4.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
                mov r5.xyz, l(-1.000000,-1.000000,-1.000000,-0.000000)
                add r4.xyz, r4.xyzx, r5.xyzx
                dp3 r0.z, r4.xyzx, r4.xyzx
                rsq r0.z, r0.z
                mul r4.xyz, r0.zzzz, r4.yxzy  // r4.x <- Out.Normal.y; r4.y <- Out.Normal.x
                ld_indexable(texture2d)(float,float,float,float) r2.x, r1.xyzw, t3.xzyw
                mov r2.x, r2.x  // r2.x <- Out.SpecPow
                mov r2.z, r2.z  // r2.z <- <UnpackGBuffer_Loc return value>.LinearDepth
                mov r2.x, r2.x  // r2.x <- <UnpackGBuffer_Loc return value>.SpecPow
                mov r2.y, r2.y  // r2.y <- <UnpackGBuffer_Loc return value>.SpecIntensity
                mov r3.xyz, r3.xyzx  // r3.x <- <UnpackGBuffer_Loc return value>.Color.x; r3.y <- <UnpackGBuffer_Loc return value>.Color.y; r3.z <- <UnpackGBuffer_Loc return value>.Color.z
                mov r4.xyz, r4.xyzx  // r4.x <- <UnpackGBuffer_Loc return value>.Normal.y; r4.y <- <UnpackGBuffer_Loc return value>.Normal.x; r4.z <- <UnpackGBuffer_Loc return value>.Normal.z
                
                #line 221
                mov r3.xyz, r3.xyzx  // r3.x <- gbd.Color.x; r3.y <- gbd.Color.y; r3.z <- gbd.Color.z
                mov r4.xyz, r4.xyzx  // r4.x <- gbd.Normal.y; r4.y <- gbd.Normal.x; r4.z <- gbd.Normal.z
                mov r2.xyz, r2.xyzx  // r2.x <- gbd.SpecPow; r2.y <- gbd.SpecIntensity; r2.z <- gbd.LinearDepth
                
                #line 225
                nop 
                mov r3.xyz, r3.xyzx
                mov r4.xyz, r4.xyzx
                mov r0.zw, r2.xxxy
                
                #line 94
                mov r4.xyz, r4.xyzx  // r4.x <- mat.normal.y; r4.y <- mat.normal.x; r4.z <- mat.normal.z
                mov r3.xyz, r3.xyzx  // r3.x <- mat.diffuseColor.x; r3.y <- mat.diffuseColor.y; r3.z <- mat.diffuseColor.z
                mul r0.y, r0.z, r0.y
                add r0.z, r0.y, r0.x  // r0.z <- mat.specPow
                mov r0.w, r0.w  // r0.w <- mat.specIntensity
                
                #line 225
                mov r4.xyz, r4.xyzx  // r4.x <- mat.normal.y; r4.y <- mat.normal.x; r4.z <- mat.normal.z
                mov r3.xyz, r3.xyzx  // r3.x <- mat.diffuseColor.x; r3.y <- mat.diffuseColor.y; r3.z <- mat.diffuseColor.z
                mov r0.z, r0.z  // r0.z <- mat.specPow
                mov r0.w, r0.w  // r0.w <- mat.specIntensity
                
                #line 228
                nop 
                mov r0.xy, v1.xyxx
                mov r2.z, r2.z
                
                #line 193
                mul r0.xy, r0.xyxx, cb7[0].xyxx
                mul r2.xy, r2.zzzz, r0.xyxx  // r2.x <- position.x; r2.y <- position.y
                mov r2.z, r2.z  // r2.z <- position.z
                mov r2.w, l(1.000000)  // r2.w <- position.w
                dp4 r1.x, r2.xyzw, cb7[1].xyzw  // r1.x <- <CalcWorldPos return value>.x
                dp4 r1.y, r2.xyzw, cb7[2].xyzw  // r1.y <- <CalcWorldPos return value>.y
                dp4 r1.z, r2.xyzw, cb7[3].xyzw  // r1.z <- <CalcWorldPos return value>.z
                
                #line 228
                mov r1.xyz, r1.xyzx  // r1.x <- position.x; r1.y <- position.y; r1.z <- position.z
                
                #line 231
                nop 
                mov r4.x, r4.x
                mov r3.xyz, r3.xyzx
                
                #line 107
                mul r0.x, r4.x, l(0.500000)
                add r0.x, r0.x, l(0.500000)  // r0.x <- up
                
                #line 110
                mul r2.xyz, r0.xxxx, cb6[1].xyzx
                add r2.xyz, r2.xyzx, cb6[0].xyzx  // r2.x <- ambient.x; r2.y <- ambient.y; r2.z <- ambient.z
                
                #line 113
                mul r2.xyz, r3.xyzx, r2.xyzx  // r2.x <- <CalcAmbient return value>.x; r2.y <- <CalcAmbient return value>.y; r2.z <- <CalcAmbient return value>.z
                
                #line 231
                mov r2.xyz, r2.xyzx  // r2.x <- finalColor.x; r2.y <- finalColor.y; r2.z <- finalColor.z
                
                #line 234
                nop 
                mov r1.xyz, r1.xyzx
                mov r4.xyz, r4.xyzx
                mov r3.xyz, r3.xyzx
                mov r0.zw, r0.zzzw
                
                #line 163
                mov r5.xyz, -cb1[3].xyzx  // r5.x <- DirToLight.x; r5.y <- DirToLight.y; r5.z <- DirToLight.z
                mov r6.xyz, cb1[1].xyzx  // r6.x <- DirLightColor.x; r6.y <- DirLightColor.y; r6.z <- DirLightColor.z
                dp3 r0.x, r5.yxzy, r4.xyzx  // r0.x <- NDotL
                max r0.x, r0.x, l(0.000000)
                min r0.x, r0.x, l(1.000000)
                mul r7.xyz, r0.xxxx, r6.xyzx  // r7.x <- finalColor.x; r7.y <- finalColor.y; r7.z <- finalColor.z
                
                #line 170
                mov r8.xyz, -r1.xyzx
                mov r9.x, cb7[1].w
                mov r9.y, cb7[2].w
                mov r9.z, cb7[3].w
                add r8.xyz, r8.xyzx, r9.xyzx  // r8.x <- ToEye.x; r8.y <- ToEye.y; r8.z <- ToEye.z
                dp3 r0.x, r8.xyzx, r8.xyzx
                rsq r0.x, r0.x
                mul r8.xyz, r0.xxxx, r8.xyzx
                add r5.xyz, r5.xyzx, r8.xyzx
                dp3 r0.x, r5.xyzx, r5.xyzx
                rsq r0.x, r0.x
                mul r5.xyz, r0.xxxx, r5.xyzx  // r5.x <- HalfWay.x; r5.y <- HalfWay.y; r5.z <- HalfWay.z
                dp3 r0.x, r5.yxzy, r4.xyzx
                max r0.x, r0.x, l(0.000000)
                min r0.x, r0.x, l(1.000000)  // r0.x <- NDotH
                log r0.x, r0.x
                mul r0.x, r0.x, r0.z
                exp r0.x, r0.x
                mul r0.xyz, r0.xxxx, r6.xyzx
                mul r0.xyz, r0.wwww, r0.xyzx
                add r0.xyz, r0.xyzx, r7.xyzx  // r0.x <- finalColor.x; r0.y <- finalColor.y; r0.z <- finalColor.z
                
                #line 177
                nop 
                mov r1.xyz, r1.xyzx
                
                #line 121
                mov r1.w, l(1.000000)
                dp4 r0.w, r1.xyzw, cb6[2].xyzw  // r0.w <- posShadowSpace.x
                dp4 r2.w, r1.xyzw, cb6[3].xyzw  // r2.w <- posShadowSpace.y
                dp4 r1.x, r1.xyzw, cb6[4].xyzw  // r1.x <- posShadowSpace.z
                
                #line 124
                add r4.xyzw, r0.wwww, cb6[6].xyzw
                mul r4.xyzw, r4.xyzw, cb6[8].xyzw  // r4.x <- posCascadeSpaceX.x; r4.y <- posCascadeSpaceX.y; r4.z <- posCascadeSpaceX.z; r4.w <- posCascadeSpaceX.w
                add r5.xyzw, r2.wwww, cb6[7].xyzw
                mul r5.xyzw, r5.xyzw, cb6[8].xyzw  // r5.x <- posCascadeSpaceY.x; r5.y <- posCascadeSpaceY.y; r5.z <- posCascadeSpaceY.z; r5.w <- posCascadeSpaceY.w
                
                #line 128
                mov r6.xyzw, -r4.xyzw
                max r6.xyzw, r4.xyzw, r6.xyzw
                ge r6.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000), r6.xyzw
                and r6.xyzw, r6.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)  // r6.x <- inCascadeX.x; r6.y <- inCascadeX.y; r6.z <- inCascadeX.z; r6.w <- inCascadeX.w
                mov r7.xyzw, -r5.xyzw
                max r7.xyzw, r5.xyzw, r7.xyzw
                ge r7.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000), r7.xyzw
                and r7.xyzw, r7.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)  // r7.x <- inCascadeY.x; r7.y <- inCascadeY.y; r7.z <- inCascadeY.z; r7.w <- inCascadeY.w
                mul r6.xyzw, r6.xyzw, r7.xyzw  // r6.x <- inCascade.x; r6.y <- inCascade.y; r6.z <- inCascade.z; r6.w <- inCascade.w
                
                #line 133
                mov r6.xyzw, r6.xyzw  // r6.x <- bestCascadeMask.x; r6.y <- bestCascadeMask.y; r6.z <- bestCascadeMask.z; r6.w <- bestCascadeMask.w
                mov r0.w, -r6.x
                add r0.w, r0.w, l(1.000000)
                mul r7.xyz, r6.zywz, r0.wwww  // r7.x <- bestCascadeMask.z; r7.y <- bestCascadeMask.y; r7.z <- bestCascadeMask.w
                mov r0.w, -r7.y
                add r0.w, r0.w, l(1.000000)
                mul r7.xz, r7.zzxz, r0.wwww  // r7.x <- bestCascadeMask.w; r7.z <- bestCascadeMask.z
                mov r0.w, -r7.z
                add r0.w, r0.w, l(1.000000)
                mul r7.w, r7.x, r0.w  // r7.w <- bestCascadeMask.w
                mov r7.x, r6.x
                dp4 r6.w, r7.xyzw, l(0.000000, 1.000000, 2.000000, 3.000000)  // r6.w <- bestCascade
                
                #line 141
                dp4 r4.x, r4.xyzw, r7.xyzw  // r4.x <- UVD.x
                dp4 r4.y, r5.xyzw, r7.xyzw  // r4.y <- UVD.y
                mov r1.x, r1.x  // r1.x <- UVD.z
                
                #line 146
                mul r1.yz, r4.xxyx, l(0.000000, 0.500000, 0.500000, 0.000000)
                add r6.xy, r1.yzyy, l(0.500000, 0.500000, 0.000000, 0.000000)  // r6.x <- UVD.x; r6.y <- UVD.y
                mov r0.w, -r6.y
                add r6.z, r0.w, l(1.000000)  // r6.z <- UVD.y
                
                #line 150
                sample_c_lz_indexable(texture2darray)(float,float,float,float) r0.w, r6.xzwx, t4.xxxx, s4, r1.x  // r0.w <- shadow
                
                #line 153
                add r0.w, r0.w, l(1.000000)
                dp4 r1.x, r7.xyzw, r7.xyzw
                ne r1.x, r1.x, l(0.000000)
                and r1.x, r1.x, l(0x3f800000)
                mov r1.x, -r1.x
                add r0.w, r0.w, r1.x
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(1.000000)  // r0.w <- shadow
                mov r0.w, r0.w  // r0.w <- <CascadedShadow return value>
                
                #line 177
                mov r0.w, r0.w  // r0.w <- shadowAtt
                mul r0.xyz, r3.xyzx, r0.xyzx
                mul r0.xyz, r0.wwww, r0.xyzx  // r0.x <- <CalcDirectional return value>.x; r0.y <- <CalcDirectional return value>.y; r0.z <- <CalcDirectional return value>.z
                
                #line 234
                add r0.xyz, r0.xyzx, r2.xyzx  // r0.x <- finalColor.x; r0.y <- finalColor.y; r0.z <- finalColor.z
                
                #line 237
                mov o0.xyz, r0.xyzx
                mov o0.w, l(1.000000)
                ret 
                // Approximately 154 instruction slots used
                            
            };
        }

    }

}

