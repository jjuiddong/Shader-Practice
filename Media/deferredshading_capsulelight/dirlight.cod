//
// FX Version: fx_5_0
//
// 9 local buffer(s)
//
cbuffer $Globals
{
    float4  g_outlineColor = { 0.800000012, 0, 0, 1 };// Offset:    0, size:   16
}

cbuffer cbPerFrame : register(b0)
{
    float4x4 gWorld;                    // Offset:    0, size:   64
    float4x4 gView;                     // Offset:   64, size:   64
    float4x4 gProjection;               // Offset:  128, size:   64
    float4x4 gLightView[3];             // Offset:  192, size:  192
    float4x4 gLightProj[3];             // Offset:  384, size:  192
    float4x4 gLightTT;                  // Offset:  576, size:   64
    float3  gEyePosW;                   // Offset:  640, size:   12
}

cbuffer cbLight : register(b1)
{
    float4  gLight_Ambient;             // Offset:    0, size:   16
    float4  gLight_Diffuse;             // Offset:   16, size:   16
    float4  gLight_Specular;            // Offset:   32, size:   16
    float3  gLight_Direction;           // Offset:   48, size:   12
    float3  gLight_PosW;                // Offset:   64, size:   12
    float3  gLight_SpecIntensity;       // Offset:   80, size:   12
}

cbuffer cbMaetrial : register(b2)
{
    float4  gMtrl_Ambient;              // Offset:    0, size:   16
    float4  gMtrl_Diffuse;              // Offset:   16, size:   16
    float4  gMtrl_Specular;             // Offset:   32, size:   16
    float4  gMtrl_Emissive;             // Offset:   48, size:   16
    float   gMtrl_Pow;                  // Offset:   64, size:    4
}

cbuffer cbPerFrameInstancing : register(b3)
{
    float4x4 gWorldInst[256];           // Offset:    0, size: 16384
}

cbuffer cbClipPlane : register(b4)
{
    float4  gClipPlane;                 // Offset:    0, size:   16
}

cbuffer cbSkinning : register(b5)
{
    float4x4 gPalette[64];              // Offset:    0, size: 4096
}

cbuffer cbDirLight : register(b6)
{
    float4  AmbientDown;                // Offset:    0, size:   16
    float4  AmbientRange;               // Offset:   16, size:   16
}

cbuffer cbGBufferUnpack : register(b7)
{
    float4  PerspectiveValues;          // Offset:    0, size:   16
    float4x4 ViewInv;                   // Offset:   16, size:   64
}

//
// 20 local object(s)
//
Texture2D txDiffuse;
Texture2D txBump;
Texture2D txSpecular;
Texture2D txEmissive;
Texture2D txShadow0;
Texture2D txShadow1;
Texture2D txShadow2;
Texture2D txDepth;
SamplerState samLinear
{
    Filter   = uint(MIN_MAG_MIP_LINEAR /* 21 */);
    AddressU = uint(CLAMP /* 3 */);
    AddressV = uint(CLAMP /* 3 */);
    BorderColor = float4(1, 1, 1, 1);
};
SamplerComparisonState samShadow
{
    Filter   = uint(COMPARISON_MIN_MAG_LINEAR_MIP_POINT /* 148 */);
    AddressU = uint(BORDER /* 4 */);
    AddressV = uint(BORDER /* 4 */);
    AddressW = uint(BORDER /* 4 */);
    BorderColor = float4(1, 1, 1, 1);
};
SamplerComparisonState samDepth
{
    Filter   = uint(COMPARISON_MIN_MAG_LINEAR_MIP_POINT /* 148 */);
    AddressU = uint(BORDER /* 4 */);
    AddressV = uint(BORDER /* 4 */);
    AddressW = uint(BORDER /* 4 */);
    BorderColor = float4(0, 0, 0, 0);
    ComparisonFunc = uint(LESS_EQUAL /* 4 */);
};
SamplerState samAnis
{
    Filter   = uint(ANISOTROPIC /* 85 */);
    AddressU = uint(WRAP /* 1 */);
    AddressV = uint(WRAP /* 1 */);
};
RasterizerState Depth
{
    DepthBias = uint(10000);
    DepthBiasClamp = float(0);
    SlopeScaledDepthBias = float(1);
};
RasterizerState NoCull
{
    CullMode = uint(NONE /* 1 */);
};
DepthStencilState DepthNormal
{
    DepthFunc = uint(LESS_EQUAL /* 4 */);
    DepthEnable = bool(TRUE /* 1 */);
};
DepthStencilState NoDepthStencil
{
    DepthEnable = bool(FALSE /* 0 */);
};
Texture2D DepthTexture;
Texture2D ColorSpecIntTexture;
Texture2D NormalTexture;
Texture2D SpecPowTexture;

//
// 1 groups(s)
//
fxgroup
{
    //
    // 1 technique(s)
    //
    technique11 Unlit
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_VertexID              0   x           0   VERTID    uint   x   
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Position              0   xyzw        0      POS   float   xyzw
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_input_sgv v0.x, vertex_id
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xy
                dcl_temps 1
                dcl_indexableTemp x0[4], 4
                //
                // Initial variable locations:
                //   v0.x <- VertexID; 
                //   o1.x <- <VS return value>.cpPos.x; o1.y <- <VS return value>.cpPos.y; 
                //   o0.x <- <VS return value>.Position.x; o0.y <- <VS return value>.Position.y; o0.z <- <VS return value>.Position.z; o0.w <- <VS return value>.Position.w
                //
                #line 32 "c:\Work\Project\Shader-Practice\Media\deferredshading_capsulelight\dirlight.fx"
                mov x0[0].xy, l(-1.000000,1.000000,0,0)
                mov x0[1].xy, l(1.000000,1.000000,0,0)
                mov x0[2].xy, l(-1.000000,-1.000000,0,0)
                mov x0[3].xy, l(1.000000,-1.000000,0,0)
                
                #line 46
                mov r0.x, v0.x
                mov r0.xy, x0[r0.x + 0].xyxx  // r0.x <- Output.Position.x; r0.y <- Output.Position.y
                mov r0.zw, l(0,0,0,1.000000)  // r0.z <- Output.Position.z; r0.w <- Output.Position.w
                
                #line 47
                mov r0.xy, r0.xyxx  // r0.x <- Output.cpPos.x; r0.y <- Output.cpPos.y
                
                #line 48
                mov o0.xyzw, r0.xyzw
                mov o1.xy, r0.xyxx
                ret 
                // Approximately 11 instruction slots used
                            
            };
            GeometryShader = NULL;
            HullShader = NULL;
            DomainShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbLight
                // {
                //
                //   float4 gLight_Ambient;             // Offset:    0 Size:    16 [unused]
                //   float4 gLight_Diffuse;             // Offset:   16 Size:    16
                //   float4 gLight_Specular;            // Offset:   32 Size:    16 [unused]
                //   float3 gLight_Direction;           // Offset:   48 Size:    12
                //   float3 gLight_PosW;                // Offset:   64 Size:    12 [unused]
                //   float3 gLight_SpecIntensity;       // Offset:   80 Size:    12 [unused]
                //
                // }
                //
                // cbuffer cbDirLight
                // {
                //
                //   float4 AmbientDown;                // Offset:    0 Size:    16
                //   float4 AmbientRange;               // Offset:   16 Size:    16
                //
                // }
                //
                // cbuffer cbGBufferUnpack
                // {
                //
                //   float4 PerspectiveValues;          // Offset:    0 Size:    16
                //   float4x4 ViewInv;                  // Offset:   16 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // DepthTexture                      texture   float          2d             t0      1 
                // ColorSpecIntTexture               texture  float4          2d             t1      1 
                // NormalTexture                     texture  float3          2d             t2      1 
                // SpecPowTexture                    texture  float4          2d             t3      1 
                // cbLight                           cbuffer      NA          NA            cb1      1 
                // cbDirLight                        cbuffer      NA          NA            cb6      1 
                // cbGBufferUnpack                   cbuffer      NA          NA            cb7      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Position              0   xyzw        0      POS   float   xy  
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB1[4], immediateIndexed
                dcl_constantbuffer CB6[2], immediateIndexed
                dcl_constantbuffer CB7[4], immediateIndexed
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_resource_texture2d (float,float,float,float) t2
                dcl_resource_texture2d (float,float,float,float) t3
                dcl_input_ps_siv linear noperspective v0.xy, position
                dcl_input_ps linear v1.xy
                dcl_output o0.xyzw
                dcl_temps 9
                //
                // Initial variable locations:
                //   v0.x <- In.Position.x; v0.y <- In.Position.y; v0.z <- In.Position.z; v0.w <- In.Position.w; 
                //   v1.x <- In.cpPos.x; v1.y <- In.cpPos.y; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 8 "c:\Work\Project\Shader-Practice\Media\deferredshading_capsulelight\dirlight.fx"
                mov r0.xy, l(10.000000,250.000000,0,0)  // r0.x <- g_SpecPowerRange.x; r0.y <- g_SpecPowerRange.y
                
                #line 158
                nop 
                ftoi r1.xy, v0.xyxx
                
                #line 140
                mov r1.xy, r1.xyxx  // r1.x <- location3.x; r1.y <- location3.y
                mov r1.zw, l(0,0,0,0)  // r1.w <- location3.z
                
                #line 142
                ld_indexable(texture2d)(float,float,float,float) r0.z, r1.xyww, t0.yzxw
                mov r0.z, r0.z  // r0.z <- depth
                
                #line 143
                nop 
                mov r0.z, r0.z
                
                #line 122
                add r0.z, r0.z, cb7[0].w
                div r2.z, cb7[0].z, r0.z  // r2.z <- linearDepth
                
                #line 123
                mov r2.z, r2.z  // r2.z <- <ConvertZToLinearDepth return value>
                
                #line 143
                mov r2.z, r2.z  // r2.z <- Out.LinearDepth
                
                #line 144
                ld_indexable(texture2d)(float,float,float,float) r3.xyzw, r1.xyww, t1.xyzw  // r3.x <- baseColorSpecInt.x; r3.y <- baseColorSpecInt.y; r3.z <- baseColorSpecInt.z; r3.w <- baseColorSpecInt.w
                
                #line 145
                mov r3.xyz, r3.xyzx  // r3.x <- Out.Color.x; r3.y <- Out.Color.y; r3.z <- Out.Color.z
                
                #line 146
                mov r2.y, r3.w  // r2.y <- Out.SpecIntensity
                
                #line 147
                ld_indexable(texture2d)(float,float,float,float) r4.xyz, r1.xyww, t2.xyzw
                mov r4.xyz, r4.xyzx  // r4.x <- Out.Normal.x; r4.y <- Out.Normal.y; r4.z <- Out.Normal.z
                
                #line 148
                mul r4.xyz, r4.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
                mov r5.xyz, l(-1.000000,-1.000000,-1.000000,-0.000000)
                add r4.xyz, r4.xyzx, r5.xyzx
                dp3 r0.z, r4.xyzx, r4.xyzx
                rsq r0.z, r0.z
                mul r4.xyz, r0.zzzz, r4.yxzy  // r4.x <- Out.Normal.y; r4.y <- Out.Normal.x
                
                #line 149
                ld_indexable(texture2d)(float,float,float,float) r2.x, r1.xyzw, t3.xzyw
                mov r2.x, r2.x  // r2.x <- Out.SpecPow
                
                #line 151
                mov r2.z, r2.z  // r2.z <- <UnpackGBuffer_Loc return value>.LinearDepth
                mov r2.x, r2.x  // r2.x <- <UnpackGBuffer_Loc return value>.SpecPow
                mov r2.y, r2.y  // r2.y <- <UnpackGBuffer_Loc return value>.SpecIntensity
                mov r3.xyz, r3.xyzx  // r3.x <- <UnpackGBuffer_Loc return value>.Color.x; r3.y <- <UnpackGBuffer_Loc return value>.Color.y; r3.z <- <UnpackGBuffer_Loc return value>.Color.z
                mov r4.xyz, r4.xyzx  // r4.x <- <UnpackGBuffer_Loc return value>.Normal.y; r4.y <- <UnpackGBuffer_Loc return value>.Normal.x; r4.z <- <UnpackGBuffer_Loc return value>.Normal.z
                
                #line 158
                mov r3.xyz, r3.xyzx  // r3.x <- gbd.Color.x; r3.y <- gbd.Color.y; r3.z <- gbd.Color.z
                mov r4.xyz, r4.xyzx  // r4.x <- gbd.Normal.y; r4.y <- gbd.Normal.x; r4.z <- gbd.Normal.z
                mov r2.xyz, r2.xyzx  // r2.x <- gbd.SpecPow; r2.y <- gbd.SpecIntensity; r2.z <- gbd.LinearDepth
                
                #line 162
                nop 
                mov r3.xyz, r3.xyzx
                mov r4.xyz, r4.xyzx
                mov r0.zw, r2.xxxy
                
                #line 77
                mov r4.xyz, r4.xyzx  // r4.x <- mat.normal.y; r4.y <- mat.normal.x; r4.z <- mat.normal.z
                
                #line 78
                mov r3.xyz, r3.xyzx  // r3.x <- mat.diffuseColor.x; r3.y <- mat.diffuseColor.y; r3.z <- mat.diffuseColor.z
                
                #line 80
                mul r0.y, r0.z, r0.y
                add r0.z, r0.y, r0.x  // r0.z <- mat.specPow
                
                #line 81
                mov r0.w, r0.w  // r0.w <- mat.specIntensity
                
                #line 162
                mov r4.xyz, r4.xyzx  // r4.x <- mat.normal.y; r4.y <- mat.normal.x; r4.z <- mat.normal.z
                mov r3.xyz, r3.xyzx  // r3.x <- mat.diffuseColor.x; r3.y <- mat.diffuseColor.y; r3.z <- mat.diffuseColor.z
                mov r0.z, r0.z  // r0.z <- mat.specPow
                mov r0.w, r0.w  // r0.w <- mat.specIntensity
                
                #line 165
                nop 
                mov r0.xy, v1.xyxx
                mov r2.z, r2.z
                
                #line 130
                mul r0.xy, r0.xyxx, cb7[0].xyxx
                mul r2.xy, r2.zzzz, r0.xyxx  // r2.x <- position.x; r2.y <- position.y
                
                #line 131
                mov r2.z, r2.z  // r2.z <- position.z
                
                #line 132
                mov r2.w, l(1.000000)  // r2.w <- position.w
                
                #line 134
                dp4 r1.x, r2.xyzw, cb7[1].xyzw  // r1.x <- <CalcWorldPos return value>.x
                dp4 r1.y, r2.xyzw, cb7[2].xyzw  // r1.y <- <CalcWorldPos return value>.y
                dp4 r1.z, r2.xyzw, cb7[3].xyzw  // r1.z <- <CalcWorldPos return value>.z
                
                #line 165
                mov r1.xyz, r1.xyzx  // r1.x <- position.x; r1.y <- position.y; r1.z <- position.z
                
                #line 168
                nop 
                mov r4.x, r4.x
                mov r3.xyz, r3.xyzx
                
                #line 90
                mul r0.x, r4.x, l(0.500000)
                add r0.x, r0.x, l(0.500000)  // r0.x <- up
                
                #line 93
                mul r2.xyz, r0.xxxx, cb6[1].xyzx
                add r2.xyz, r2.xyzx, cb6[0].xyzx  // r2.x <- ambient.x; r2.y <- ambient.y; r2.z <- ambient.z
                
                #line 96
                mul r2.xyz, r3.xyzx, r2.xyzx  // r2.x <- <CalcAmbient return value>.x; r2.y <- <CalcAmbient return value>.y; r2.z <- <CalcAmbient return value>.z
                
                #line 168
                mov r2.xyz, r2.xyzx  // r2.x <- finalColor.x; r2.y <- finalColor.y; r2.z <- finalColor.z
                
                #line 171
                nop 
                mov r1.xyz, r1.xyzx
                mov r4.xyz, r4.xyzx
                mov r3.xyz, r3.xyzx
                mov r0.zw, r0.zzzw
                
                #line 103
                mov r5.xyz, -cb1[3].xyzx  // r5.x <- DirToLight.x; r5.y <- DirToLight.y; r5.z <- DirToLight.z
                
                #line 104
                mov r6.xyz, cb1[1].xyzx  // r6.x <- DirLightColor.x; r6.y <- DirLightColor.y; r6.z <- DirLightColor.z
                
                #line 106
                dp3 r0.x, r5.yxzy, r4.xyzx  // r0.x <- NDotL
                
                #line 107
                max r0.x, r0.x, l(0.000000)
                min r0.x, r0.x, l(1.000000)
                mul r7.xyz, r0.xxxx, r6.xyzx  // r7.x <- finalColor.x; r7.y <- finalColor.y; r7.z <- finalColor.z
                
                #line 110
                mov r1.xyz, -r1.xyzx
                mov r8.x, cb7[1].w
                mov r8.y, cb7[2].w
                mov r8.z, cb7[3].w
                add r1.xyz, r1.xyzx, r8.xyzx  // r1.x <- ToEye.x; r1.y <- ToEye.y; r1.z <- ToEye.z
                
                #line 111
                dp3 r0.x, r1.xyzx, r1.xyzx
                rsq r0.x, r0.x
                mul r1.xyz, r0.xxxx, r1.xyzx
                
                #line 112
                add r1.xyz, r5.xyzx, r1.xyzx
                dp3 r0.x, r1.xyzx, r1.xyzx
                rsq r0.x, r0.x
                mul r1.xyz, r0.xxxx, r1.xyzx  // r1.x <- HalfWay.x; r1.y <- HalfWay.y; r1.z <- HalfWay.z
                
                #line 113
                dp3 r0.x, r1.yxzy, r4.xyzx
                max r0.x, r0.x, l(0.000000)
                min r0.x, r0.x, l(1.000000)  // r0.x <- NDotH
                
                #line 114
                log r0.x, r0.x
                mul r0.x, r0.x, r0.z
                exp r0.x, r0.x
                mul r0.xyz, r0.xxxx, r6.xyzx
                mul r0.xyz, r0.wwww, r0.xyzx
                add r0.xyz, r0.xyzx, r7.xyzx  // r0.x <- finalColor.x; r0.y <- finalColor.y; r0.z <- finalColor.z
                
                #line 116
                mul r0.xyz, r3.xyzx, r0.xyzx  // r0.x <- <CalcDirectional return value>.x; r0.y <- <CalcDirectional return value>.y; r0.z <- <CalcDirectional return value>.z
                
                #line 171
                add r0.xyz, r0.xyzx, r2.xyzx  // r0.x <- finalColor.x; r0.y <- finalColor.y; r0.z <- finalColor.z
                
                #line 174
                mov o0.xyz, r0.xyzx
                mov o0.w, l(1.000000)
                ret 
                // Approximately 104 instruction slots used
                            
            };
        }

    }

}

