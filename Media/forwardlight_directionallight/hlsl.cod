//
// FX Version: fx_5_0
//
// 8 local buffer(s)
//
cbuffer $Globals
{
    float4  g_outlineColor = { 0.800000012, 0, 0, 1 };// Offset:    0, size:   16
}

cbuffer cbPerFrame : register(b0)
{
    float4x4 gWorld;                    // Offset:    0, size:   64
    float4x4 gView;                     // Offset:   64, size:   64
    float4x4 gProjection;               // Offset:  128, size:   64
    float4x4 gLightView[3];             // Offset:  192, size:  192
    float4x4 gLightProj[3];             // Offset:  384, size:  192
    float4x4 gLightTT;                  // Offset:  576, size:   64
    float3  gEyePosW;                   // Offset:  640, size:   12
}

cbuffer cbLight : register(b1)
{
    float4  gLight_Ambient;             // Offset:    0, size:   16
    float4  gLight_Diffuse;             // Offset:   16, size:   16
    float4  gLight_Specular;            // Offset:   32, size:   16
    float3  gLight_Direction;           // Offset:   48, size:   12
    float3  gLight_PosW;                // Offset:   64, size:   12
}

cbuffer cbMaetrial : register(b2)
{
    float4  gMtrl_Ambient;              // Offset:    0, size:   16
    float4  gMtrl_Diffuse;              // Offset:   16, size:   16
    float4  gMtrl_Specular;             // Offset:   32, size:   16
    float4  gMtrl_Emissive;             // Offset:   48, size:   16
    float   gMtrl_Pow;                  // Offset:   64, size:    4
}

cbuffer cbPerFrameInstancing : register(b3)
{
    float4x4 gWorldInst[256];           // Offset:    0, size: 16384
}

cbuffer cbClipPlane : register(b4)
{
    float4  gClipPlane;                 // Offset:    0, size:   16
}

cbuffer cbSkinning : register(b5)
{
    float4x4 gPalette[64];              // Offset:    0, size: 4096
}

cbuffer cbDirLightPS : register(b6)
{
    float4  AmbientDown;                // Offset:    0, size:   16
    float4  AmbientRange;               // Offset:   16, size:   16
}

//
// 16 local object(s)
//
Texture2D txDiffuse;
Texture2D txBump;
Texture2D txSpecular;
Texture2D txEmissive;
Texture2D txShadow0;
Texture2D txShadow1;
Texture2D txShadow2;
Texture2D txDepth;
SamplerState samLinear
{
    Filter   = uint(MIN_MAG_MIP_LINEAR /* 21 */);
    AddressU = uint(CLAMP /* 3 */);
    AddressV = uint(CLAMP /* 3 */);
    BorderColor = float4(1, 1, 1, 1);
};
SamplerComparisonState samShadow
{
    Filter   = uint(COMPARISON_MIN_MAG_LINEAR_MIP_POINT /* 148 */);
    AddressU = uint(BORDER /* 4 */);
    AddressV = uint(BORDER /* 4 */);
    AddressW = uint(BORDER /* 4 */);
    BorderColor = float4(1, 1, 1, 1);
    ComparisonFunc = uint(GREATER_EQUAL /* 7 */);
};
SamplerComparisonState samDepth
{
    Filter   = uint(COMPARISON_MIN_MAG_LINEAR_MIP_POINT /* 148 */);
    AddressU = uint(BORDER /* 4 */);
    AddressV = uint(BORDER /* 4 */);
    AddressW = uint(BORDER /* 4 */);
    BorderColor = float4(0, 0, 0, 0);
    ComparisonFunc = uint(LESS_EQUAL /* 4 */);
};
SamplerState samAnis
{
    Filter   = uint(ANISOTROPIC /* 85 */);
    AddressU = uint(WRAP /* 1 */);
    AddressV = uint(WRAP /* 1 */);
};
RasterizerState Depth
{
    DepthBias = uint(10000);
    DepthBiasClamp = float(0);
    SlopeScaledDepthBias = float(1);
};
RasterizerState NoCull
{
    CullMode = uint(NONE /* 1 */);
};
DepthStencilState DepthNormal
{
    DepthFunc = uint(LESS_EQUAL /* 4 */);
    DepthEnable = bool(TRUE /* 1 */);
};
DepthStencilState NoDepthStencil
{
    DepthEnable = bool(FALSE /* 0 */);
};

//
// 1 groups(s)
//
fxgroup
{
    //
    // 2 technique(s)
    //
    technique11 Unlit
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gView;                    // Offset:   64 Size:    64
                //   float4x4 gProjection;              // Offset:  128 Size:    64
                //   float4x4 gLightView[3];            // Offset:  192 Size:   192 [unused]
                //   float4x4 gLightProj[3];            // Offset:  384 Size:   192 [unused]
                //   float4x4 gLightTT;                 // Offset:  576 Size:    64 [unused]
                //   float3 gEyePosW;                   // Offset:  640 Size:    12
                //
                // }
                //
                // cbuffer cbClipPlane
                // {
                //
                //   float4 gClipPlane;                 // Offset:    0 Size:    16
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbClipPlane                       cbuffer      NA          NA    4        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyzw        0     NONE   float   xyzw
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // SV_InstanceID            0   x           3   INSTID    uint       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // TEXCOORD                 0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 1   xy          2     NONE   float   xy  
                // TEXCOORD                 2   xyzw        3     NONE   float   xyzw
                // TEXCOORD                 3   xyz         4     NONE   float   xyz 
                // SV_ClipDistance          0   x           5  CLIPDST   float   x   
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[41], immediateIndexed
                dcl_constantbuffer cb4[1], immediateIndexed
                dcl_input v0.xyzw
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xy
                dcl_output o3.xyzw
                dcl_output o4.xyz
                dcl_output_siv o5.x, clip_distance
                dcl_temps 6
                //
                // Initial variable locations:
                //   v0.x <- Pos.x; v0.y <- Pos.y; v0.z <- Pos.z; v0.w <- Pos.w; 
                //   v1.x <- Normal.x; v1.y <- Normal.y; v1.z <- Normal.z; 
                //   v2.x <- Tex.x; v2.y <- Tex.y; 
                //   v3.x <- instID; 
                //   o5.x <- <VS return value>.clip; 
                //   o4.x <- <VS return value>.toEye.x; o4.y <- <VS return value>.toEye.y; o4.z <- <VS return value>.toEye.z; 
                //   o3.x <- <VS return value>.PosH.x; o3.y <- <VS return value>.PosH.y; o3.z <- <VS return value>.PosH.z; o3.w <- <VS return value>.PosH.w; 
                //   o2.x <- <VS return value>.Tex.x; o2.y <- <VS return value>.Tex.y; 
                //   o1.x <- <VS return value>.Normal.x; o1.y <- <VS return value>.Normal.y; o1.z <- <VS return value>.Normal.z; 
                //   o0.x <- <VS return value>.Pos.x; o0.y <- <VS return value>.Pos.y; o0.z <- <VS return value>.Pos.z; o0.w <- <VS return value>.Pos.w
                //
                #line 22 "D:\Project\Shader-Practice\Media\forwardlight_directionallight\hlsl.fx"
                mov r0.xyzw, cb0[0].xyzw  // r0.x <- mWorld._m00; r0.y <- mWorld._m10; r0.z <- mWorld._m20; r0.w <- mWorld._m30
                mov r1.xyzw, cb0[1].xyzw  // r1.x <- mWorld._m01; r1.y <- mWorld._m11; r1.z <- mWorld._m21; r1.w <- mWorld._m31
                mov r2.xyzw, cb0[2].xyzw  // r2.x <- mWorld._m02; r2.y <- mWorld._m12; r2.z <- mWorld._m22; r2.w <- mWorld._m32
                mov r3.xyzw, cb0[3].xyzw  // r3.x <- mWorld._m03; r3.y <- mWorld._m13; r3.z <- mWorld._m23; r3.w <- mWorld._m33
                dp4 r4.x, v0.xyzw, r0.xyzw  // r4.x <- PosW.x
                dp4 r4.y, v0.xyzw, r1.xyzw  // r4.y <- PosW.y
                dp4 r4.z, v0.xyzw, r2.xyzw  // r4.z <- PosW.z
                dp4 r4.w, v0.xyzw, r3.xyzw  // r4.w <- PosW.w
                dp4 r3.x, r4.xyzw, cb0[4].xyzw  // r3.x <- output.Pos.x
                dp4 r3.y, r4.xyzw, cb0[5].xyzw  // r3.y <- output.Pos.y
                dp4 r3.z, r4.xyzw, cb0[6].xyzw  // r3.z <- output.Pos.z
                dp4 r3.w, r4.xyzw, cb0[7].xyzw  // r3.w <- output.Pos.w
                dp4 r5.x, r3.xyzw, cb0[8].xyzw  // r5.x <- output.Pos.x
                dp4 r5.y, r3.xyzw, cb0[9].xyzw  // r5.y <- output.Pos.y
                dp4 r5.z, r3.xyzw, cb0[10].xyzw  // r5.z <- output.Pos.z
                dp4 r5.w, r3.xyzw, cb0[11].xyzw  // r5.w <- output.Pos.w
                dp3 r0.x, v1.xyzx, r0.xyzx
                dp3 r0.y, v1.xyzx, r1.xyzx
                dp3 r0.z, v1.xyzx, r2.xyzx
                dp3 r0.w, r0.xyzx, r0.xyzx
                rsq r0.w, r0.w
                mul r0.xyz, r0.wwww, r0.xyzx  // r0.x <- output.Normal.x; r0.y <- output.Normal.y; r0.z <- output.Normal.z
                mov r1.xy, v2.xyxx  // r1.x <- output.Tex.x; r1.y <- output.Tex.y
                mov r5.xyzw, r5.xyzw  // r5.x <- output.PosH.x; r5.y <- output.PosH.y; r5.z <- output.PosH.z; r5.w <- output.PosH.w
                itof r0.w, l(1)
                mov r2.xyzw, -r4.xyzw
                add r3.xyz, r2.xyzx, cb0[40].xyzx
                add r3.w, r0.w, r2.w
                dp4 r0.w, r3.xyzw, r3.xyzw
                rsq r0.w, r0.w
                mul r2.xyz, r0.wwww, r3.xyzx  // r2.x <- output.toEye.x; r2.y <- output.toEye.y; r2.z <- output.toEye.z
                dp4 r0.w, r4.xyzw, cb4[0].xyzw  // r0.w <- output.clip
                
                #line 33
                mov o0.xyzw, r5.xyzw
                mov o3.xyzw, r5.xyzw
                mov o1.xyz, r0.xyzx
                mov o4.xyz, r2.xyzx
                mov o2.xy, r1.xyxx
                mov o5.x, r0.w
                ret 
                // Approximately 39 instruction slots used
                            
            };
            GeometryShader = NULL;
            HullShader = NULL;
            DomainShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbLight
                // {
                //
                //   float4 gLight_Ambient;             // Offset:    0 Size:    16 [unused]
                //   float4 gLight_Diffuse;             // Offset:   16 Size:    16
                //   float4 gLight_Specular;            // Offset:   32 Size:    16
                //   float3 gLight_Direction;           // Offset:   48 Size:    12
                //   float3 gLight_PosW;                // Offset:   64 Size:    12 [unused]
                //
                // }
                //
                // cbuffer cbMaetrial
                // {
                //
                //   float4 gMtrl_Ambient;              // Offset:    0 Size:    16 [unused]
                //   float4 gMtrl_Diffuse;              // Offset:   16 Size:    16 [unused]
                //   float4 gMtrl_Specular;             // Offset:   32 Size:    16 [unused]
                //   float4 gMtrl_Emissive;             // Offset:   48 Size:    16 [unused]
                //   float gMtrl_Pow;                   // Offset:   64 Size:     4
                //
                // }
                //
                // cbuffer cbDirLightPS
                // {
                //
                //   float4 AmbientDown;                // Offset:    0 Size:    16
                //   float4 AmbientRange;               // Offset:   16 Size:    16
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samLinear                         sampler      NA          NA    0        1
                // txDiffuse                         texture  float4          2d    0        1
                // cbLight                           cbuffer      NA          NA    1        1
                // cbMaetrial                        cbuffer      NA          NA    2        1
                // cbDirLightPS                      cbuffer      NA          NA    6        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // TEXCOORD                 0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 1   xy          2     NONE   float   xy  
                // TEXCOORD                 2   xyzw        3     NONE   float       
                // TEXCOORD                 3   xyz         4     NONE   float   xyz 
                // SV_ClipDistance          0   x           5  CLIPDST   float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb1[4], immediateIndexed
                dcl_constantbuffer cb2[5], immediateIndexed
                dcl_constantbuffer cb6[2], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xy
                dcl_input_ps linear v4.xyz
                dcl_output o0.xyzw
                dcl_temps 5
                //
                // Initial variable locations:
                //   v0.x <- In.Pos.x; v0.y <- In.Pos.y; v0.z <- In.Pos.z; v0.w <- In.Pos.w; 
                //   v1.x <- In.Normal.x; v1.y <- In.Normal.y; v1.z <- In.Normal.z; 
                //   v2.x <- In.Tex.x; v2.y <- In.Tex.y; 
                //   v3.x <- In.PosH.x; v3.y <- In.PosH.y; v3.z <- In.PosH.z; v3.w <- In.PosH.w; 
                //   v4.x <- In.toEye.x; v4.y <- In.toEye.y; v4.z <- In.toEye.z; 
                //   v5.x <- In.clip; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 55 "D:\Project\Shader-Practice\Media\forwardlight_directionallight\hlsl.fx"
                sample_indexable(texture2d)(float,float,float,float) r0.xyz, v2.xyxx, t0.xyzw, s0
                mov r0.xyz, r0.xyzx  // r0.x <- DiffuseColor.x; r0.y <- DiffuseColor.y; r0.z <- DiffuseColor.z
                mul r0.xyz, r0.xyzx, r0.xyzx
                nop 
                mov r0.w, v1.y
                mov r0.xyz, r0.xyzx
                
                #line 41
                mul r0.w, r0.w, l(0.500000)
                add r0.w, r0.w, l(0.500000)  // r0.w <- up
                mul r1.xyz, r0.wwww, cb6[1].xyzx
                add r1.xyz, r1.xyzx, cb6[0].xyzx  // r1.x <- ambient.x; r1.y <- ambient.y; r1.z <- ambient.z
                mul r1.xyz, r0.xyzx, r1.xyzx  // r1.x <- <CalcAmbient return value>.x; r1.y <- <CalcAmbient return value>.y; r1.z <- <CalcAmbient return value>.z
                
                #line 58
                mov r1.xyz, r1.xyzx  // r1.x <- AmbientColor.x; r1.y <- AmbientColor.y; r1.z <- AmbientColor.z
                
                #line 61
                mov r2.xyz, -cb1[3].xyzx  // r2.x <- L.x; r2.y <- L.y; r2.z <- L.z
                dp3 r0.w, v4.xyzx, v4.xyzx
                rsq r0.w, r0.w
                mul r3.xyz, r0.wwww, v4.xyzx
                add r3.xyz, r2.xyzx, r3.xyzx
                dp3 r0.w, r3.xyzx, r3.xyzx
                rsq r0.w, r0.w
                mul r3.xyz, r0.wwww, r3.xyzx  // r3.x <- H.x; r3.y <- H.y; r3.z <- H.z
                dp3 r0.w, v1.xyzx, v1.xyzx
                rsq r0.w, r0.w
                mul r4.xyz, r0.wwww, v1.xyzx  // r4.x <- N.x; r4.y <- N.y; r4.z <- N.z
                dp3 r0.w, r4.xyzx, r2.xyzx
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(1.000000)  // r0.w <- lightV
                mul r0.xyz, r0.xyzx, cb1[1].xyzx
                mul r0.xyz, r0.wwww, r0.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                dp3 r0.w, r4.xyzx, r3.xyzx
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(1.000000)
                log r0.w, r0.w
                mul r0.w, r0.w, cb2[4].x
                exp r0.w, r0.w
                mul r1.xyz, r0.wwww, cb1[2].xyzx
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- finalColor.x; r0.y <- finalColor.y; r0.z <- finalColor.z
                
                #line 70
                mov o0.xyz, r0.xyzx
                mov o0.w, l(1.000000)
                ret 
                // Approximately 40 instruction slots used
                            
            };
        }

    }

    technique11 Unlit_Old
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gView;                    // Offset:   64 Size:    64
                //   float4x4 gProjection;              // Offset:  128 Size:    64
                //   float4x4 gLightView[3];            // Offset:  192 Size:   192 [unused]
                //   float4x4 gLightProj[3];            // Offset:  384 Size:   192 [unused]
                //   float4x4 gLightTT;                 // Offset:  576 Size:    64 [unused]
                //   float3 gEyePosW;                   // Offset:  640 Size:    12
                //
                // }
                //
                // cbuffer cbClipPlane
                // {
                //
                //   float4 gClipPlane;                 // Offset:    0 Size:    16
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbClipPlane                       cbuffer      NA          NA    4        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyzw        0     NONE   float   xyzw
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // SV_InstanceID            0   x           3   INSTID    uint       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // TEXCOORD                 0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 1   xy          2     NONE   float   xy  
                // TEXCOORD                 2   xyzw        3     NONE   float   xyzw
                // TEXCOORD                 3   xyz         4     NONE   float   xyz 
                // SV_ClipDistance          0   x           5  CLIPDST   float   x   
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[41], immediateIndexed
                dcl_constantbuffer cb4[1], immediateIndexed
                dcl_input v0.xyzw
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xy
                dcl_output o3.xyzw
                dcl_output o4.xyz
                dcl_output_siv o5.x, clip_distance
                dcl_temps 6
                //
                // Initial variable locations:
                //   v0.x <- Pos.x; v0.y <- Pos.y; v0.z <- Pos.z; v0.w <- Pos.w; 
                //   v1.x <- Normal.x; v1.y <- Normal.y; v1.z <- Normal.z; 
                //   v2.x <- Tex.x; v2.y <- Tex.y; 
                //   v3.x <- instID; 
                //   o5.x <- <VS return value>.clip; 
                //   o4.x <- <VS return value>.toEye.x; o4.y <- <VS return value>.toEye.y; o4.z <- <VS return value>.toEye.z; 
                //   o3.x <- <VS return value>.PosH.x; o3.y <- <VS return value>.PosH.y; o3.z <- <VS return value>.PosH.z; o3.w <- <VS return value>.PosH.w; 
                //   o2.x <- <VS return value>.Tex.x; o2.y <- <VS return value>.Tex.y; 
                //   o1.x <- <VS return value>.Normal.x; o1.y <- <VS return value>.Normal.y; o1.z <- <VS return value>.Normal.z; 
                //   o0.x <- <VS return value>.Pos.x; o0.y <- <VS return value>.Pos.y; o0.z <- <VS return value>.Pos.z; o0.w <- <VS return value>.Pos.w
                //
                #line 22 "D:\Project\Shader-Practice\Media\forwardlight_directionallight\hlsl.fx"
                mov r0.xyzw, cb0[0].xyzw  // r0.x <- mWorld._m00; r0.y <- mWorld._m10; r0.z <- mWorld._m20; r0.w <- mWorld._m30
                mov r1.xyzw, cb0[1].xyzw  // r1.x <- mWorld._m01; r1.y <- mWorld._m11; r1.z <- mWorld._m21; r1.w <- mWorld._m31
                mov r2.xyzw, cb0[2].xyzw  // r2.x <- mWorld._m02; r2.y <- mWorld._m12; r2.z <- mWorld._m22; r2.w <- mWorld._m32
                mov r3.xyzw, cb0[3].xyzw  // r3.x <- mWorld._m03; r3.y <- mWorld._m13; r3.z <- mWorld._m23; r3.w <- mWorld._m33
                dp4 r4.x, v0.xyzw, r0.xyzw  // r4.x <- PosW.x
                dp4 r4.y, v0.xyzw, r1.xyzw  // r4.y <- PosW.y
                dp4 r4.z, v0.xyzw, r2.xyzw  // r4.z <- PosW.z
                dp4 r4.w, v0.xyzw, r3.xyzw  // r4.w <- PosW.w
                dp4 r3.x, r4.xyzw, cb0[4].xyzw  // r3.x <- output.Pos.x
                dp4 r3.y, r4.xyzw, cb0[5].xyzw  // r3.y <- output.Pos.y
                dp4 r3.z, r4.xyzw, cb0[6].xyzw  // r3.z <- output.Pos.z
                dp4 r3.w, r4.xyzw, cb0[7].xyzw  // r3.w <- output.Pos.w
                dp4 r5.x, r3.xyzw, cb0[8].xyzw  // r5.x <- output.Pos.x
                dp4 r5.y, r3.xyzw, cb0[9].xyzw  // r5.y <- output.Pos.y
                dp4 r5.z, r3.xyzw, cb0[10].xyzw  // r5.z <- output.Pos.z
                dp4 r5.w, r3.xyzw, cb0[11].xyzw  // r5.w <- output.Pos.w
                dp3 r0.x, v1.xyzx, r0.xyzx
                dp3 r0.y, v1.xyzx, r1.xyzx
                dp3 r0.z, v1.xyzx, r2.xyzx
                dp3 r0.w, r0.xyzx, r0.xyzx
                rsq r0.w, r0.w
                mul r0.xyz, r0.wwww, r0.xyzx  // r0.x <- output.Normal.x; r0.y <- output.Normal.y; r0.z <- output.Normal.z
                mov r1.xy, v2.xyxx  // r1.x <- output.Tex.x; r1.y <- output.Tex.y
                mov r5.xyzw, r5.xyzw  // r5.x <- output.PosH.x; r5.y <- output.PosH.y; r5.z <- output.PosH.z; r5.w <- output.PosH.w
                itof r0.w, l(1)
                mov r2.xyzw, -r4.xyzw
                add r3.xyz, r2.xyzx, cb0[40].xyzx
                add r3.w, r0.w, r2.w
                dp4 r0.w, r3.xyzw, r3.xyzw
                rsq r0.w, r0.w
                mul r2.xyz, r0.wwww, r3.xyzx  // r2.x <- output.toEye.x; r2.y <- output.toEye.y; r2.z <- output.toEye.z
                dp4 r0.w, r4.xyzw, cb4[0].xyzw  // r0.w <- output.clip
                
                #line 33
                mov o0.xyzw, r5.xyzw
                mov o3.xyzw, r5.xyzw
                mov o1.xyz, r0.xyzx
                mov o4.xyz, r2.xyzx
                mov o2.xy, r1.xyxx
                mov o5.x, r0.w
                ret 
                // Approximately 39 instruction slots used
                            
            };
            GeometryShader = NULL;
            HullShader = NULL;
            DomainShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbLight
                // {
                //
                //   float4 gLight_Ambient;             // Offset:    0 Size:    16
                //   float4 gLight_Diffuse;             // Offset:   16 Size:    16
                //   float4 gLight_Specular;            // Offset:   32 Size:    16
                //   float3 gLight_Direction;           // Offset:   48 Size:    12
                //   float3 gLight_PosW;                // Offset:   64 Size:    12 [unused]
                //
                // }
                //
                // cbuffer cbMaetrial
                // {
                //
                //   float4 gMtrl_Ambient;              // Offset:    0 Size:    16
                //   float4 gMtrl_Diffuse;              // Offset:   16 Size:    16
                //   float4 gMtrl_Specular;             // Offset:   32 Size:    16
                //   float4 gMtrl_Emissive;             // Offset:   48 Size:    16 [unused]
                //   float gMtrl_Pow;                   // Offset:   64 Size:     4
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samLinear                         sampler      NA          NA    0        1
                // txDiffuse                         texture  float4          2d    0        1
                // cbLight                           cbuffer      NA          NA    1        1
                // cbMaetrial                        cbuffer      NA          NA    2        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // TEXCOORD                 0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 1   xy          2     NONE   float   xy  
                // TEXCOORD                 2   xyzw        3     NONE   float       
                // TEXCOORD                 3   xyz         4     NONE   float   xyz 
                // SV_ClipDistance          0   x           5  CLIPDST   float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb1[4], immediateIndexed
                dcl_constantbuffer cb2[5], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xy
                dcl_input_ps linear v4.xyz
                dcl_output o0.xyzw
                dcl_temps 4
                //
                // Initial variable locations:
                //   v0.x <- In.Pos.x; v0.y <- In.Pos.y; v0.z <- In.Pos.z; v0.w <- In.Pos.w; 
                //   v1.x <- In.Normal.x; v1.y <- In.Normal.y; v1.z <- In.Normal.z; 
                //   v2.x <- In.Tex.x; v2.y <- In.Tex.y; 
                //   v3.x <- In.PosH.x; v3.y <- In.PosH.y; v3.z <- In.PosH.z; v3.w <- In.PosH.w; 
                //   v4.x <- In.toEye.x; v4.y <- In.toEye.y; v4.z <- In.toEye.z; 
                //   v5.x <- In.clip; 
                //   o0.x <- <PS_Old return value>.x; o0.y <- <PS_Old return value>.y; o0.z <- <PS_Old return value>.z; o0.w <- <PS_Old return value>.w
                //
                #line 76 "D:\Project\Shader-Practice\Media\forwardlight_directionallight\hlsl.fx"
                nop 
                
                #line 384 "D:\Project\Shader-Practice\Media\common.fx"
                mov r0.xyz, -cb1[3].xyzx  // r0.x <- L.x; r0.y <- L.y; r0.z <- L.z
                dp3 r0.w, v4.xyzx, v4.xyzx
                rsq r0.w, r0.w
                mul r1.xyz, r0.wwww, v4.xyzx
                add r1.xyz, r0.xyzx, r1.xyzx
                dp3 r0.w, r1.xyzx, r1.xyzx
                rsq r0.w, r0.w
                mul r1.xyz, r0.wwww, r1.xyzx  // r1.x <- H.x; r1.y <- H.y; r1.z <- H.z
                dp3 r0.w, v1.xyzx, v1.xyzx
                rsq r0.w, r0.w
                mul r2.xyz, r0.wwww, v1.xyzx  // r2.x <- N.x; r2.y <- N.y; r2.z <- N.z
                itof r0.w, l(0)
                dp3 r0.x, r2.xyzx, r0.xyzx
                max r0.x, r0.x, r0.w  // r0.x <- lightV
                mul r0.yzw, cb1[0].xxyz, cb2[0].xxyz
                mul r3.xyz, cb1[1].xyzx, cb2[1].xyzx
                mul r3.xyz, r3.xyzx, l(0.100000, 0.100000, 0.100000, 0.000000)
                add r0.yzw, r0.yyzw, r3.xxyz
                mul r3.xyz, cb1[1].xyzx, cb2[1].xyzx
                mul r3.xyz, r0.xxxx, r3.xyzx
                mul r3.xyz, r3.xyzx, l(0.100000, 0.100000, 0.100000, 0.000000)
                add r0.yzw, r0.yyzw, r3.xxyz
                mul r3.xyz, cb1[1].xyzx, cb2[1].xyzx
                mul r3.xyz, r0.xxxx, r3.xyzx
                mul r3.xyz, r3.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
                mul r3.xyz, r3.xyzx, l(0.900000, 0.900000, 0.900000, 0.000000)
                add r0.xyz, r0.yzwy, r3.xyzx
                mul r3.xyz, cb1[2].xyzx, cb2[2].xyzx
                itof r0.w, l(0)
                dp3 r1.x, r2.xyzx, r1.xyzx
                max r0.w, r0.w, r1.x
                log r0.w, r0.w
                mul r0.w, r0.w, cb2[4].x
                exp r0.w, r0.w
                mul r1.xyz, r0.wwww, r3.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- color.x; r0.y <- color.y; r0.z <- color.z
                
                #line 395
                mov r0.xyz, r0.xyzx  // r0.x <- <GetLightingColor return value>.x; r0.y <- <GetLightingColor return value>.y; r0.z <- <GetLightingColor return value>.z
                
                #line 76 "D:\Project\Shader-Practice\Media\forwardlight_directionallight\hlsl.fx"
                mov r0.xyz, r0.xyzx  // r0.x <- color.x; r0.y <- color.y; r0.z <- color.z
                sample_indexable(texture2d)(float,float,float,float) r1.xyzw, v2.xyxx, t0.xyzw, s0  // r1.x <- texColor.x; r1.y <- texColor.y; r1.z <- texColor.z; r1.w <- texColor.w
                mul r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- Out.x; r0.y <- Out.y; r0.z <- Out.z
                mul o0.w, r1.w, cb2[1].w
                mov o0.xyz, r0.xyzx
                ret 
                // Approximately 44 instruction slots used
                            
            };
        }

    }

}

