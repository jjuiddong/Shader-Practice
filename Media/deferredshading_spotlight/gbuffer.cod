//
// FX Version: fx_5_0
//
// 8 local buffer(s)
//
cbuffer $Globals
{
    float4  g_outlineColor = { 0.800000012, 0, 0, 1 };// Offset:    0, size:   16
}

cbuffer cbPerFrame : register(b0)
{
    float4x4 gWorld;                    // Offset:    0, size:   64
    float4x4 gView;                     // Offset:   64, size:   64
    float4x4 gProjection;               // Offset:  128, size:   64
    float4x4 gLightView[3];             // Offset:  192, size:  192
    float4x4 gLightProj[3];             // Offset:  384, size:  192
    float4x4 gLightTT;                  // Offset:  576, size:   64
    float3  gEyePosW;                   // Offset:  640, size:   12
}

cbuffer cbLight : register(b1)
{
    float4  gLight_Ambient;             // Offset:    0, size:   16
    float4  gLight_Diffuse;             // Offset:   16, size:   16
    float4  gLight_Specular;            // Offset:   32, size:   16
    float3  gLight_Direction;           // Offset:   48, size:   12
    float3  gLight_PosW;                // Offset:   64, size:   12
    float3  gLight_SpecIntensity;       // Offset:   80, size:   12
}

cbuffer cbMaetrial : register(b2)
{
    float4  gMtrl_Ambient;              // Offset:    0, size:   16
    float4  gMtrl_Diffuse;              // Offset:   16, size:   16
    float4  gMtrl_Specular;             // Offset:   32, size:   16
    float4  gMtrl_Emissive;             // Offset:   48, size:   16
    float   gMtrl_Pow;                  // Offset:   64, size:    4
}

cbuffer cbPerFrameInstancing : register(b3)
{
    float4x4 gWorldInst[256];           // Offset:    0, size: 16384
}

cbuffer cbClipPlane : register(b4)
{
    float4  gClipPlane;                 // Offset:    0, size:   16
}

cbuffer cbSkinning : register(b5)
{
    float4x4 gPalette[64];              // Offset:    0, size: 4096
}

cbuffer cbGBufferUnpack : register(b7)
{
    float4  PerspectiveValues;          // Offset:    0, size:   16
    float4x4 ViewInv;                   // Offset:   16, size:   64
}

//
// 21 local object(s)
//
Texture2D txDiffuse;
Texture2D txBump;
Texture2D txSpecular;
Texture2D txEmissive;
Texture2D txShadow0;
Texture2D txShadow1;
Texture2D txShadow2;
Texture2D txDepth;
SamplerState samLinear
{
    Filter   = uint(MIN_MAG_MIP_LINEAR /* 21 */);
    AddressU = uint(CLAMP /* 3 */);
    AddressV = uint(CLAMP /* 3 */);
    BorderColor = float4(1, 1, 1, 1);
};
SamplerComparisonState samShadow
{
    Filter   = uint(COMPARISON_MIN_MAG_LINEAR_MIP_POINT /* 148 */);
    AddressU = uint(BORDER /* 4 */);
    AddressV = uint(BORDER /* 4 */);
    AddressW = uint(BORDER /* 4 */);
    BorderColor = float4(1, 1, 1, 1);
};
SamplerComparisonState samDepth
{
    Filter   = uint(COMPARISON_MIN_MAG_LINEAR_MIP_POINT /* 148 */);
    AddressU = uint(BORDER /* 4 */);
    AddressV = uint(BORDER /* 4 */);
    AddressW = uint(BORDER /* 4 */);
    BorderColor = float4(0, 0, 0, 0);
    ComparisonFunc = uint(LESS_EQUAL /* 4 */);
};
SamplerState samAnis
{
    Filter   = uint(ANISOTROPIC /* 85 */);
    AddressU = uint(WRAP /* 1 */);
    AddressV = uint(WRAP /* 1 */);
};
RasterizerState Depth
{
    DepthBias = uint(10000);
    DepthBiasClamp = float(0);
    SlopeScaledDepthBias = float(1);
};
RasterizerState NoCull
{
    CullMode = uint(NONE /* 1 */);
};
DepthStencilState DepthNormal
{
    DepthFunc = uint(LESS_EQUAL /* 4 */);
    DepthEnable = bool(TRUE /* 1 */);
};
DepthStencilState NoDepthStencil
{
    DepthEnable = bool(FALSE /* 0 */);
};
Texture2D DepthTexture;
Texture2D ColorSpecIntTexture;
Texture2D NormalTexture;
Texture2D SpecPowTexture;
SamplerState samPoint
{
    Filter   = uint(MIN_MAG_MIP_POINT /* 0 */);
    AddressU = uint(CLAMP /* 3 */);
    AddressV = uint(CLAMP /* 3 */);
    BorderColor = float4(1, 1, 1, 1);
};

//
// 1 groups(s)
//
fxgroup
{
    //
    // 1 technique(s)
    //
    technique11 Unlit
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_VertexID              0   x           0   VERTID    uint   x   
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Position              0   xyzw        0      POS   float   xyzw
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                // TEXCOORD                 1   xyzw        2     NONE   float   xyzw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_input_sgv v0.x, vertex_id
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xy
                dcl_output o2.xyzw
                dcl_temps 3
                dcl_indexableTemp x0[4], 4
                dcl_indexableTemp x1[4], 4
                dcl_indexableTemp x2[4], 4
                dcl_indexableTemp x3[4], 4
                //
                // Initial variable locations:
                //   v0.x <- VertexID; 
                //   o2.x <- <VS return value>.sampMask.x; o2.y <- <VS return value>.sampMask.y; o2.z <- <VS return value>.sampMask.z; o2.w <- <VS return value>.sampMask.w; 
                //   o1.x <- <VS return value>.UV.x; o1.y <- <VS return value>.UV.y; 
                //   o0.x <- <VS return value>.Position.x; o0.y <- <VS return value>.Position.y; o0.z <- <VS return value>.Position.z; o0.w <- <VS return value>.Position.w
                //
                #line 18 "C:\Work\Project\Shader-Practice\Media\deferredshading_spotlight\gbuffer.fx"
                mov x0[0].xy, l(-0.750000,-0.750000,0,0)
                mov x0[1].xy, l(-0.250000,-0.750000,0,0)
                mov x0[2].xy, l(0.250000,-0.750000,0,0)
                mov x0[3].xy, l(0.750000,-0.750000,0,0)
                
                #line 25
                mov x1[0].xy, l(1.000000,1.000000,0,0)
                mov x1[1].xy, l(1.000000,-1.000000,0,0)
                mov x1[2].xy, l(-1.000000,1.000000,0,0)
                mov x1[3].xy, l(-1.000000,-1.000000,0,0)
                
                #line 32
                mov x2[0].xy, l(1.000000,0,0,0)
                mov x2[1].xy, l(1.000000,1.000000,0,0)
                mov x2[2].xy, l(0,0,0,0)
                mov x2[3].xy, l(0,1.000000,0,0)
                
                #line 39
                mov x3[0].xyzw, l(1.000000,0,0,0)
                mov x3[1].xyzw, l(0,1.000000,0,0)
                mov x3[2].xyzw, l(0,0,1.000000,0)
                mov x3[3].xyzw, l(0,0,0,1.000000)
                
                #line 109
                mov r0.x, l(4)
                udiv null, r0.x, v0.x, r0.x
                mov r0.xy, x1[r0.x + 0].xyxx
                mul r0.xy, r0.xyxx, l(0.200000, 0.200000, 0.000000, 0.000000)
                mov r0.z, l(4)
                udiv r0.z, null, v0.x, r0.z
                mov r0.zw, x0[r0.z + 0].xxxy
                add r0.xy, r0.zwzz, r0.xyxx  // r0.x <- Output.Position.x; r0.y <- Output.Position.y
                mov r0.zw, l(0,0,0,1.000000)  // r0.z <- Output.Position.z; r0.w <- Output.Position.w
                
                #line 110
                mov r1.x, l(4)
                udiv null, r1.x, v0.x, r1.x
                mov r1.xy, x2[r1.x + 0].xyxx  // r1.x <- Output.UV.x; r1.y <- Output.UV.y
                
                #line 111
                mov r1.z, l(4)
                udiv r1.z, null, v0.x, r1.z
                mov r2.xyzw, x3[r1.z + 0].xyzw  // r2.x <- Output.sampMask.x; r2.y <- Output.sampMask.y; r2.z <- Output.sampMask.z; r2.w <- Output.sampMask.w
                
                #line 113
                mov o0.xyzw, r0.xyzw
                mov o2.xyzw, r2.xyzw
                mov o1.xy, r1.xyxx
                ret 
                // Approximately 35 instruction slots used
                            
            };
            GeometryShader = NULL;
            HullShader = NULL;
            DomainShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbGBufferUnpack
                // {
                //
                //   float4 PerspectiveValues;          // Offset:    0 Size:    16
                //   float4x4 ViewInv;                  // Offset:   16 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samPoint                          sampler      NA          NA             s4      1 
                // DepthTexture                      texture   float          2d             t0      1 
                // ColorSpecIntTexture               texture  float4          2d             t1      1 
                // NormalTexture                     texture  float3          2d             t2      1 
                // SpecPowTexture                    texture  float4          2d             t3      1 
                // cbGBufferUnpack                   cbuffer      NA          NA            cb7      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Position              0   xyzw        0      POS   float       
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                // TEXCOORD                 1   xyzw        2     NONE   float   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TARGET                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB7[1], immediateIndexed
                dcl_sampler s4, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_resource_texture2d (float,float,float,float) t2
                dcl_resource_texture2d (float,float,float,float) t3
                dcl_input_ps linear v1.xy
                dcl_input_ps linear v2.xyzw
                dcl_output o0.xyzw
                dcl_temps 5
                //
                // Initial variable locations:
                //   v0.x <- In.Position.x; v0.y <- In.Position.y; v0.z <- In.Position.z; v0.w <- In.Position.w; 
                //   v1.x <- In.UV.x; v1.y <- In.UV.y; 
                //   v2.x <- In.sampMask.x; v2.y <- In.sampMask.y; v2.z <- In.sampMask.z; v2.w <- In.sampMask.w; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 119 "C:\Work\Project\Shader-Practice\Media\deferredshading_spotlight\gbuffer.fx"
                nop 
                
                #line 92
                sample_indexable(texture2d)(float,float,float,float) r0.x, v1.xyxx, t0.xyzw, s4
                mov r0.x, r0.x  // r0.x <- depth
                
                #line 93
                nop 
                mov r0.x, r0.x
                
                #line 64
                add r0.x, r0.x, cb7[0].w
                div r0.x, cb7[0].z, r0.x  // r0.x <- linearDepth
                
                #line 65
                mov r0.x, r0.x  // r0.x <- <ConvertZToLinearDepth return value>
                
                #line 93
                mov r0.x, r0.x  // r0.x <- Out.LinearDepth
                
                #line 94
                sample_indexable(texture2d)(float,float,float,float) r1.xyzw, v1.xyxx, t1.xyzw, s4  // r1.x <- baseColorSpecInt.x; r1.y <- baseColorSpecInt.y; r1.z <- baseColorSpecInt.z; r1.w <- baseColorSpecInt.w
                
                #line 95
                mov r1.xyz, r1.xyzx  // r1.x <- Out.Color.x; r1.y <- Out.Color.y; r1.z <- Out.Color.z
                
                #line 96
                mov r0.z, r1.w  // r0.z <- Out.SpecIntensity
                
                #line 97
                sample_indexable(texture2d)(float,float,float,float) r2.xyz, v1.xyxx, t2.xyzw, s4
                mov r2.xyz, r2.xyzx  // r2.x <- Out.Normal.x; r2.y <- Out.Normal.y; r2.z <- Out.Normal.z
                
                #line 98
                mul r2.xyz, r2.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
                mov r3.xyz, l(-1.000000,-1.000000,-1.000000,-0.000000)
                add r2.xyz, r2.xyzx, r3.xyzx
                dp3 r0.w, r2.xyzx, r2.xyzx
                rsq r0.w, r0.w
                mul r2.xyz, r0.wwww, r2.xyzx
                
                #line 99
                sample_indexable(texture2d)(float,float,float,float) r0.y, v1.xyxx, t3.yxzw, s4
                mov r0.y, r0.y  // r0.y <- Out.SpecPow
                
                #line 101
                mov r0.x, r0.x  // r0.x <- <UnpackGBuffer return value>.LinearDepth
                mov r0.y, r0.y  // r0.y <- <UnpackGBuffer return value>.SpecPow
                mov r0.z, r0.z  // r0.z <- <UnpackGBuffer return value>.SpecIntensity
                mov r1.xyz, r1.xyzx  // r1.x <- <UnpackGBuffer return value>.Color.x; r1.y <- <UnpackGBuffer return value>.Color.y; r1.z <- <UnpackGBuffer return value>.Color.z
                mov r2.xyz, r2.xyzx  // r2.x <- <UnpackGBuffer return value>.Normal.x; r2.y <- <UnpackGBuffer return value>.Normal.y; r2.z <- <UnpackGBuffer return value>.Normal.z
                
                #line 119
                mov r1.xyz, r1.xyzx  // r1.x <- gbd.Color.x; r1.y <- gbd.Color.y; r1.z <- gbd.Color.z
                mov r2.xyz, r2.xyzx  // r2.x <- gbd.Normal.x; r2.y <- gbd.Normal.y; r2.z <- gbd.Normal.z
                mov r0.xyz, r0.xyzx  // r0.x <- gbd.LinearDepth; r0.y <- gbd.SpecPow; r0.z <- gbd.SpecIntensity
                
                #line 120
                mov r3.xyzw, l(0,0,0,1.000000)  // r3.x <- finalColor.x; r3.y <- finalColor.y; r3.z <- finalColor.z; r3.w <- finalColor.w
                
                #line 121
                div r0.w, r0.x, l(75.000000)
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(1.000000)
                mov r0.w, -r0.w
                add r4.x, r0.w, l(1.000000)
                div r0.w, r0.x, l(125.000000)
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(1.000000)
                mov r0.w, -r0.w
                add r4.y, r0.w, l(1.000000)
                div r0.x, r0.x, l(200.000000)
                max r0.x, r0.x, l(0.000000)
                min r0.x, r0.x, l(1.000000)
                mov r0.x, -r0.x
                add r4.z, r0.x, l(1.000000)
                mov r4.w, l(0)
                mul r4.xyzw, r4.xyzw, v2.xxxx
                add r3.xyzw, r3.xyzw, r4.xyzw
                
                #line 122
                mul r1.xyz, r1.xyzx, v2.yyyy
                mul r1.w, v2.y, l(0.000000)
                add r1.xyzw, r1.xyzw, r3.xyzw  // r1.x <- finalColor.x; r1.y <- finalColor.y; r1.z <- finalColor.z; r1.w <- finalColor.w
                
                #line 123
                mul r2.xyz, r2.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
                add r2.xyz, r2.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
                mul r2.xyz, r2.xyzx, v2.zzzz
                mul r2.w, v2.z, l(0.000000)
                add r1.xyzw, r1.xyzw, r2.xyzw
                
                #line 124
                mul r0.xy, r0.zyzz, v2.wwww
                mul r0.zw, v2.wwww, l(0.000000, 0.000000, 0.000000, 0.000000)
                add r0.xyzw, r0.xyzw, r1.xyzw  // r0.x <- finalColor.x; r0.y <- finalColor.y; r0.z <- finalColor.z; r0.w <- finalColor.w
                
                #line 126
                mov o0.xyzw, r0.xyzw
                ret 
                // Approximately 62 instruction slots used
                            
            };
        }

    }

}

